
C:\Users\hh\AppData\Local\Temp\arduino_build_751022/duino85.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	22 c0       	rjmp	.+68     	; 0x46 <__dtors_end>
       2:	46 c0       	rjmp	.+140    	; 0x90 <__bad_interrupt>
       4:	45 c0       	rjmp	.+138    	; 0x90 <__bad_interrupt>
       6:	44 c0       	rjmp	.+136    	; 0x90 <__bad_interrupt>
       8:	43 c0       	rjmp	.+134    	; 0x90 <__bad_interrupt>
       a:	83 c6       	rjmp	.+3334   	; 0xd12 <__vector_5>
       c:	41 c0       	rjmp	.+130    	; 0x90 <__bad_interrupt>
       e:	40 c0       	rjmp	.+128    	; 0x90 <__bad_interrupt>
      10:	3f c0       	rjmp	.+126    	; 0x90 <__bad_interrupt>
      12:	3e c0       	rjmp	.+124    	; 0x90 <__bad_interrupt>
      14:	3d c0       	rjmp	.+122    	; 0x90 <__bad_interrupt>
      16:	3c c0       	rjmp	.+120    	; 0x90 <__bad_interrupt>
      18:	3b c0       	rjmp	.+118    	; 0x90 <__bad_interrupt>
      1a:	7d c7       	rjmp	.+3834   	; 0xf16 <__vector_13>
      1c:	c4 c6       	rjmp	.+3464   	; 0xda6 <__vector_14>

0000001e <__trampolines_end>:
__trampolines_start():
      1e:	99 79       	andi	r25, 0x99	; 153
      20:	82 5a       	subi	r24, 0xA2	; 162
      22:	a1 eb       	ldi	r26, 0xB1	; 177
      24:	d9 6e       	ori	r29, 0xE9	; 233
      26:	dc bc       	out	0x2c, r13	; 44
      28:	1b 8f       	std	Y+27, r17	; 0x1b
      2a:	d6 c1       	rjmp	.+940    	; 0x3d8 <__stack+0x179>
      2c:	62 ca       	rjmp	.-2876   	; 0xfffff4f2 <__eeprom_end+0xff7ef4f2>

0000002e <sha1_init_state>:
      2e:	01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10     .#Eg........vT2.
      3e:	f0 e1 d2 c3                                         ....

00000042 <__ctors_start>:
__ctors_start():
      42:	d3 07       	cpc	r29, r19

00000044 <__ctors_end>:
__dtors_start():
      44:	e6 08       	sbc	r14, r6

00000046 <__dtors_end>:
__dtors_end():
      46:	11 24       	eor	r1, r1
      48:	1f be       	out	0x3f, r1	; 63
      4a:	cf e5       	ldi	r28, 0x5F	; 95
      4c:	d2 e0       	ldi	r29, 0x02	; 2
      4e:	de bf       	out	0x3e, r29	; 62
      50:	cd bf       	out	0x3d, r28	; 61

00000052 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      52:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      54:	a6 e7       	ldi	r26, 0x76	; 118
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      56:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      58:	01 c0       	rjmp	.+2      	; 0x5c <.do_clear_bss_start>

0000005a <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      5a:	1d 92       	st	X+, r1

0000005c <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      5c:	a5 31       	cpi	r26, 0x15	; 21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      5e:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      60:	e1 f7       	brne	.-8      	; 0x5a <.do_clear_bss_loop>

00000062 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      62:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      64:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      66:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      68:	e0 ef       	ldi	r30, 0xF0	; 240
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      6a:	fc e1       	ldi	r31, 0x1C	; 28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      6e:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      70:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      72:	a6 37       	cpi	r26, 0x76	; 118
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      74:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      78:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      7a:	c2 e2       	ldi	r28, 0x22	; 34
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      7c:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      7e:	03 c0       	rjmp	.+6      	; 0x86 <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      80:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      82:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      84:	03 dc       	rcall	.-2042   	; 0xfffff88c <__eeprom_end+0xff7ef88c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      86:	c1 32       	cpi	r28, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      88:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      8a:	d1 f7       	brne	.-12     	; 0x80 <__do_global_ctors+0x8>
      8c:	b0 d7       	rcall	.+3936   	; 0xfee <main>
      8e:	24 ce       	rjmp	.-952    	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>

00000090 <__bad_interrupt>:
__vector_1():
      90:	b7 cf       	rjmp	.-146    	; 0x0 <__vectors>

00000092 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
      92:	cf 92       	push	r12
      94:	df 92       	push	r13
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
      9a:	0f 93       	push	r16
      9c:	1f 93       	push	r17
      9e:	cf 93       	push	r28
      a0:	df 93       	push	r29
      a2:	6c 01       	movw	r12, r24
      a4:	eb 01       	movw	r28, r22
      a6:	7b 01       	movw	r14, r22
      a8:	e4 0e       	add	r14, r20
      aa:	f5 1e       	adc	r15, r21
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:35
  size_t n = 0;
      ac:	10 e0       	ldi	r17, 0x00	; 0
      ae:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:36
  while (size--) {
      b0:	ce 15       	cp	r28, r14
      b2:	df 05       	cpc	r29, r15
      b4:	61 f0       	breq	.+24     	; 0xce <Print::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:37
    n += write(*buffer++);
      b6:	69 91       	ld	r22, Y+
      b8:	d6 01       	movw	r26, r12
      ba:	ed 91       	ld	r30, X+
      bc:	fc 91       	ld	r31, X
      be:	01 90       	ld	r0, Z+
      c0:	f0 81       	ld	r31, Z
      c2:	e0 2d       	mov	r30, r0
      c4:	c6 01       	movw	r24, r12
      c6:	09 95       	icall
      c8:	08 0f       	add	r16, r24
      ca:	19 1f       	adc	r17, r25
      cc:	f1 cf       	rjmp	.-30     	; 0xb0 <Print::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:40
  }
  return n;
}
      ce:	c8 01       	movw	r24, r16
      d0:	df 91       	pop	r29
      d2:	cf 91       	pop	r28
      d4:	1f 91       	pop	r17
      d6:	0f 91       	pop	r16
      d8:	ff 90       	pop	r15
      da:	ef 90       	pop	r14
      dc:	df 90       	pop	r13
      de:	cf 90       	pop	r12
      e0:	08 95       	ret

000000e2 <USI_TWI_Data_In_Receive_Buffer>:
USI_TWI_Data_In_Receive_Buffer():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:136

// Check if there is data in the receive buffer.
unsigned char USI_TWI_Data_In_Receive_Buffer(void)
{
  unsigned char tmpRxTail;          // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;           // Not necessary, but prevents warnings
      e2:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <TWI_RxTail>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:137
  return (TWI_RxHead - tmpRxTail) & TWI_RX_BUFFER_MASK; // Return 0 (FALSE) if the receive buffer is empty.
      e6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <TWI_RxHead>
      ea:	89 1b       	sub	r24, r25
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:138
}
      ec:	8f 70       	andi	r24, 0x0F	; 15
      ee:	08 95       	ret

000000f0 <TwoWire::read() [clone .constprop.5]>:
available():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:551

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
      f0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <TwoWire::BufferLength>
      f4:	88 23       	and	r24, r24
      f6:	39 f0       	breq	.+14     	; 0x106 <TwoWire::read() [clone .constprop.5]+0x16>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:552
    return BufferLength - BufferIndex;
      f8:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <TwoWire::BufferIndex>
read():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:565
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
      fc:	82 13       	cpse	r24, r18
      fe:	18 c0       	rjmp	.+48     	; 0x130 <TwoWire::read() [clone .constprop.5]+0x40>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:562

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;
     100:	8f ef       	ldi	r24, 0xFF	; 255
     102:	9f ef       	ldi	r25, 0xFF	; 255
     104:	08 95       	ret
available():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:554
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
    return BufferLength - BufferIndex;
  } else {
    return USI_TWI_Data_In_Receive_Buffer();
     106:	ed df       	rcall	.-38     	; 0xe2 <USI_TWI_Data_In_Receive_Buffer>
read():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:565
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
     108:	88 23       	and	r24, r24
     10a:	d1 f3       	breq	.-12     	; 0x100 <TwoWire::read() [clone .constprop.5]+0x10>
USI_TWI_Receive_Byte():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:112
// Returns a byte from the receive buffer. Waits if buffer is empty.
unsigned char USI_TWI_Receive_Byte(void)
{
  unsigned char tmptail;
  unsigned char tmpRxTail; // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;  // Not necessary, but prevents warnings
     10c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <TWI_RxTail>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:113
  while (TWI_RxHead == tmpRxTail)
     110:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <TWI_RxHead>
     114:	98 17       	cp	r25, r24
     116:	e1 f3       	breq	.-8      	; 0x110 <TwoWire::read() [clone .constprop.5]+0x20>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:115
    ;
  tmptail    = (TWI_RxTail + 1) & TWI_RX_BUFFER_MASK; // Calculate buffer index
     118:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <TWI_RxTail>
     11c:	ef 5f       	subi	r30, 0xFF	; 255
     11e:	ef 70       	andi	r30, 0x0F	; 15
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:116
  TWI_RxTail = tmptail;                               // Store new index
     120:	e0 93 4c 01 	sts	0x014C, r30	; 0x80014c <TWI_RxTail>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:117
  return TWI_RxBuf[tmptail];                          // Return data from the buffer.
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	ea 58       	subi	r30, 0x8A	; 138
     128:	ff 4f       	sbci	r31, 0xFF	; 255
read():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:570
    if (BufferLength) {
      value = Buffer[BufferIndex];
      ++BufferIndex;
    } else {
      value = USI_TWI_Receive_Byte();
     12a:	80 81       	ld	r24, Z
     12c:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:575
    }
  }

  return value;
}
     12e:	08 95       	ret
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:567
  int value = -1;

  // get each successive byte on each call
  if (available()) {
    if (BufferLength) {
      value = Buffer[BufferIndex];
     130:	e2 2f       	mov	r30, r18
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	ea 58       	subi	r30, 0x8A	; 138
     136:	ff 4f       	sbci	r31, 0xFF	; 255
     138:	80 81       	ld	r24, Z
     13a:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:568
      ++BufferIndex;
     13c:	2f 5f       	subi	r18, 0xFF	; 255
     13e:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <TwoWire::BufferIndex>
     142:	08 95       	ret

00000144 <provideStr(char const*)>:
provideStr():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:96
  digitalWrite(ledPin, LOW);
}

void provideStr(const char str[]) {
  // puts str (\0)  to backBu,
  backP = 0;
     144:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <backP>
     148:	28 2f       	mov	r18, r24
     14a:	a2 e0       	ldi	r26, 0x02	; 2
     14c:	b1 e0       	ldi	r27, 0x01	; 1
     14e:	fc 01       	movw	r30, r24
     150:	9e 2f       	mov	r25, r30
     152:	92 1b       	sub	r25, r18
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:98
  for (byte k = 0; k < 30; k++) {
    if (str[k] == 0) return;
     154:	81 91       	ld	r24, Z+
     156:	88 23       	and	r24, r24
     158:	11 f0       	breq	.+4      	; 0x15e <provideStr(char const*)+0x1a>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:99
    backBuf[backP++] = str[k];
     15a:	8d 93       	st	X+, r24
     15c:	f9 cf       	rjmp	.-14     	; 0x150 <provideStr(char const*)+0xc>
     15e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <backP>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:101
  }
}
     162:	08 95       	ret

00000164 <sha1_hasher_add_byte(sha1_hasher_s*, unsigned char)>:
sha1_hasher_add_byte():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:104
}



void sha1_hasher_add_byte(sha1_hasher_t hasher, uint8_t byte)
{
     164:	2f 92       	push	r2
     166:	3f 92       	push	r3
     168:	4f 92       	push	r4
     16a:	5f 92       	push	r5
     16c:	6f 92       	push	r6
     16e:	7f 92       	push	r7
     170:	8f 92       	push	r8
     172:	9f 92       	push	r9
     174:	af 92       	push	r10
     176:	bf 92       	push	r11
     178:	cf 92       	push	r12
     17a:	df 92       	push	r13
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
     18c:	a8 97       	sbiw	r28, 0x28	; 40
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	f8 94       	cli
     192:	de bf       	out	0x3e, r29	; 62
     194:	0f be       	out	0x3f, r0	; 63
     196:	cd bf       	out	0x3d, r28	; 61
     198:	8c 01       	movw	r16, r24
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:105
	hasher->buffer.bytes[hasher->block_offset] = byte;
     19a:	9c 01       	movw	r18, r24
     19c:	2c 5a       	subi	r18, 0xAC	; 172
     19e:	3f 4f       	sbci	r19, 0xFF	; 255
     1a0:	3a 83       	std	Y+2, r19	; 0x02
     1a2:	29 83       	std	Y+1, r18	; 0x01
     1a4:	d9 01       	movw	r26, r18
     1a6:	8c 91       	ld	r24, X
     1a8:	f8 01       	movw	r30, r16
     1aa:	e8 0f       	add	r30, r24
     1ac:	f1 1d       	adc	r31, r1
     1ae:	64 8b       	std	Z+20, r22	; 0x14
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:106
	hasher->block_offset++;
     1b0:	8f 5f       	subi	r24, 0xFF	; 255
     1b2:	8c 93       	st	X, r24
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:107
	if(hasher->block_offset == SHA1_BLOCK_LEN)
     1b4:	80 34       	cpi	r24, 0x40	; 64
     1b6:	09 f0       	breq	.+2      	; 0x1ba <sha1_hasher_add_byte(sha1_hasher_s*, unsigned char)+0x56>
     1b8:	31 c1       	rjmp	.+610    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     1ba:	f8 01       	movw	r30, r16
     1bc:	74 96       	adiw	r30, 0x14	; 20
sha1_hash_block():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:36
	uint8_t i4;
	// On x86 we have to change the byte order, because...
	// I actually do not know.
	for(i = i4 = 0; i < 16; i++, i4 += 4)
	{
		hasher->buffer.words[i] =  	(((uint32_t)hasher->buffer.bytes[i4]) << 24) |
     1be:	20 81       	ld	r18, Z
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:37
						(((uint32_t)hasher->buffer.bytes[i4 + 1]) << 16) |
     1c0:	81 81       	ldd	r24, Z+1	; 0x01
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	a0 e0       	ldi	r26, 0x00	; 0
     1c8:	dc 01       	movw	r26, r24
     1ca:	99 27       	eor	r25, r25
     1cc:	88 27       	eor	r24, r24
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:38
						(((uint32_t)hasher->buffer.bytes[i4 + 2]) << 8) |
     1ce:	b2 2b       	or	r27, r18
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:39
						(((uint32_t)hasher->buffer.bytes[i4 + 3]));
     1d0:	23 81       	ldd	r18, Z+3	; 0x03
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:38
	// I actually do not know.
	for(i = i4 = 0; i < 16; i++, i4 += 4)
	{
		hasher->buffer.words[i] =  	(((uint32_t)hasher->buffer.bytes[i4]) << 24) |
						(((uint32_t)hasher->buffer.bytes[i4 + 1]) << 16) |
						(((uint32_t)hasher->buffer.bytes[i4 + 2]) << 8) |
     1d2:	82 2b       	or	r24, r18
     1d4:	22 81       	ldd	r18, Z+2	; 0x02
     1d6:	92 2b       	or	r25, r18
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:36
	uint8_t i4;
	// On x86 we have to change the byte order, because...
	// I actually do not know.
	for(i = i4 = 0; i < 16; i++, i4 += 4)
	{
		hasher->buffer.words[i] =  	(((uint32_t)hasher->buffer.bytes[i4]) << 24) |
     1d8:	81 93       	st	Z+, r24
     1da:	91 93       	st	Z+, r25
     1dc:	a1 93       	st	Z+, r26
     1de:	b1 93       	st	Z+, r27
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:34
	// Allocating the message schedule would eat 2k RAM
	// which is a no-go on an AVR. 
	uint8_t i4;
	// On x86 we have to change the byte order, because...
	// I actually do not know.
	for(i = i4 = 0; i < 16; i++, i4 += 4)
     1e0:	69 80       	ldd	r6, Y+1	; 0x01
     1e2:	7a 80       	ldd	r7, Y+2	; 0x02
     1e4:	6e 16       	cp	r6, r30
     1e6:	7f 06       	cpc	r7, r31
     1e8:	51 f7       	brne	.-44     	; 0x1be <sha1_hasher_add_byte(sha1_hasher_s*, unsigned char)+0x5a>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:42
						(((uint32_t)hasher->buffer.bytes[i4 + 1]) << 16) |
						(((uint32_t)hasher->buffer.bytes[i4 + 2]) << 8) |
						(((uint32_t)hasher->buffer.bytes[i4 + 3]));
	}
	
	a = hasher->state.words[0];
     1ea:	d8 01       	movw	r26, r16
     1ec:	cd 90       	ld	r12, X+
     1ee:	dd 90       	ld	r13, X+
     1f0:	ed 90       	ld	r14, X+
     1f2:	fc 90       	ld	r15, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	cd 86       	std	Y+13, r12	; 0x0d
     1f8:	de 86       	std	Y+14, r13	; 0x0e
     1fa:	ef 86       	std	Y+15, r14	; 0x0f
     1fc:	f8 8a       	std	Y+16, r15	; 0x10
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:43
	b = hasher->state.words[1];
     1fe:	14 96       	adiw	r26, 0x04	; 4
     200:	cd 90       	ld	r12, X+
     202:	dd 90       	ld	r13, X+
     204:	ed 90       	ld	r14, X+
     206:	fc 90       	ld	r15, X
     208:	17 97       	sbiw	r26, 0x07	; 7
     20a:	c9 8a       	std	Y+17, r12	; 0x11
     20c:	da 8a       	std	Y+18, r13	; 0x12
     20e:	eb 8a       	std	Y+19, r14	; 0x13
     210:	fc 8a       	std	Y+20, r15	; 0x14
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:44
	c = hasher->state.words[2];
     212:	18 96       	adiw	r26, 0x08	; 8
     214:	cd 90       	ld	r12, X+
     216:	dd 90       	ld	r13, X+
     218:	ed 90       	ld	r14, X+
     21a:	fc 90       	ld	r15, X
     21c:	1b 97       	sbiw	r26, 0x0b	; 11
     21e:	cd 8a       	std	Y+21, r12	; 0x15
     220:	de 8a       	std	Y+22, r13	; 0x16
     222:	ef 8a       	std	Y+23, r14	; 0x17
     224:	f8 8e       	std	Y+24, r15	; 0x18
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:45
	d = hasher->state.words[3];
     226:	1c 96       	adiw	r26, 0x0c	; 12
     228:	cd 90       	ld	r12, X+
     22a:	dd 90       	ld	r13, X+
     22c:	ed 90       	ld	r14, X+
     22e:	fc 90       	ld	r15, X
     230:	1f 97       	sbiw	r26, 0x0f	; 15
     232:	c9 8e       	std	Y+25, r12	; 0x19
     234:	da 8e       	std	Y+26, r13	; 0x1a
     236:	eb 8e       	std	Y+27, r14	; 0x1b
     238:	fc 8e       	std	Y+28, r15	; 0x1c
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:46
	e = hasher->state.words[4];
     23a:	50 96       	adiw	r26, 0x10	; 16
     23c:	cd 90       	ld	r12, X+
     23e:	dd 90       	ld	r13, X+
     240:	ed 90       	ld	r14, X+
     242:	fc 90       	ld	r15, X
     244:	53 97       	sbiw	r26, 0x13	; 19
     246:	cd 8e       	std	Y+29, r12	; 0x1d
     248:	de 8e       	std	Y+30, r13	; 0x1e
     24a:	ef 8e       	std	Y+31, r14	; 0x1f
     24c:	f8 a2       	std	Y+32, r15	; 0x20
sha1_hasher_add_byte():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:43
						(((uint32_t)hasher->buffer.bytes[i4 + 2]) << 8) |
						(((uint32_t)hasher->buffer.bytes[i4 + 3]));
	}
	
	a = hasher->state.words[0];
	b = hasher->state.words[1];
     24e:	c9 88       	ldd	r12, Y+17	; 0x11
     250:	da 88       	ldd	r13, Y+18	; 0x12
     252:	eb 88       	ldd	r14, Y+19	; 0x13
     254:	fc 88       	ldd	r15, Y+20	; 0x14
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:45
	c = hasher->state.words[2];
	d = hasher->state.words[3];
     256:	89 8c       	ldd	r8, Y+25	; 0x19
     258:	9a 8c       	ldd	r9, Y+26	; 0x1a
     25a:	ab 8c       	ldd	r10, Y+27	; 0x1b
     25c:	bc 8c       	ldd	r11, Y+28	; 0x1c
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:44
						(((uint32_t)hasher->buffer.bytes[i4 + 3]));
	}
	
	a = hasher->state.words[0];
	b = hasher->state.words[1];
	c = hasher->state.words[2];
     25e:	2d 89       	ldd	r18, Y+21	; 0x15
     260:	3e 89       	ldd	r19, Y+22	; 0x16
     262:	4f 89       	ldd	r20, Y+23	; 0x17
     264:	58 8d       	ldd	r21, Y+24	; 0x18
     266:	29 83       	std	Y+1, r18	; 0x01
     268:	3a 83       	std	Y+2, r19	; 0x02
     26a:	4b 83       	std	Y+3, r20	; 0x03
     26c:	5c 83       	std	Y+4, r21	; 0x04
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:46
	d = hasher->state.words[3];
	e = hasher->state.words[4];
     26e:	4d 8c       	ldd	r4, Y+29	; 0x1d
     270:	5e 8c       	ldd	r5, Y+30	; 0x1e
     272:	6f 8c       	ldd	r6, Y+31	; 0x1f
     274:	78 a0       	ldd	r7, Y+32	; 0x20
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:42
						(((uint32_t)hasher->buffer.bytes[i4 + 1]) << 16) |
						(((uint32_t)hasher->buffer.bytes[i4 + 2]) << 8) |
						(((uint32_t)hasher->buffer.bytes[i4 + 3]));
	}
	
	a = hasher->state.words[0];
     276:	4d 85       	ldd	r20, Y+13	; 0x0d
     278:	5e 85       	ldd	r21, Y+14	; 0x0e
     27a:	6f 85       	ldd	r22, Y+15	; 0x0f
     27c:	78 89       	ldd	r23, Y+16	; 0x10
     27e:	4d 83       	std	Y+5, r20	; 0x05
     280:	5e 83       	std	Y+6, r21	; 0x06
     282:	6f 83       	std	Y+7, r22	; 0x07
     284:	78 87       	std	Y+8, r23	; 0x08
sha1_hash_block():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:46
	b = hasher->state.words[1];
	c = hasher->state.words[2];
	d = hasher->state.words[3];
	e = hasher->state.words[4];
     286:	8e ef       	ldi	r24, 0xFE	; 254
     288:	28 2e       	mov	r2, r24
     28a:	33 24       	eor	r3, r3
     28c:	3a 94       	dec	r3
sha1_hasher_add_byte():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:48

	for(i = 0; i < 80; i++)
     28e:	20 e0       	ldi	r18, 0x00	; 0
sha1_hash_block():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:65
								^ hasher->buffer.words[(i - 8)& 15]
								^ hasher->buffer.words[(i - 14)& 15]
								^ hasher->buffer.words[(i - 16)& 15]);
		}

		temp = sha1_rotl(5, a) + e + hasher->buffer.words[i & 15] + sha1_k(i);
     290:	34 e1       	ldi	r19, 0x14	; 20
     292:	82 2f       	mov	r24, r18
     294:	63 2f       	mov	r22, r19
     296:	7e da       	rcall	.-2820   	; 0xfffff794 <__eeprom_end+0xff7ef794>
     298:	e8 2f       	mov	r30, r24
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	ee 0f       	add	r30, r30
     29e:	ff 1f       	adc	r31, r31
     2a0:	ee 0f       	add	r30, r30
     2a2:	ff 1f       	adc	r31, r31
     2a4:	e2 5e       	subi	r30, 0xE2	; 226
     2a6:	ff 4f       	sbci	r31, 0xFF	; 255
     2a8:	45 91       	lpm	r20, Z+
     2aa:	55 91       	lpm	r21, Z+
     2ac:	65 91       	lpm	r22, Z+
     2ae:	74 91       	lpm	r23, Z
     2b0:	4d a3       	std	Y+37, r20	; 0x25
     2b2:	5e a3       	std	Y+38, r21	; 0x26
     2b4:	6f a3       	std	Y+39, r22	; 0x27
     2b6:	78 a7       	std	Y+40, r23	; 0x28
     2b8:	e2 2f       	mov	r30, r18
     2ba:	ef 70       	andi	r30, 0x0F	; 15
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	35 96       	adiw	r30, 0x05	; 5
     2c0:	ee 0f       	add	r30, r30
     2c2:	ff 1f       	adc	r31, r31
     2c4:	ee 0f       	add	r30, r30
     2c6:	ff 1f       	adc	r31, r31
     2c8:	e0 0f       	add	r30, r16
     2ca:	f1 1f       	adc	r31, r17
     2cc:	4d 81       	ldd	r20, Y+5	; 0x05
     2ce:	5e 81       	ldd	r21, Y+6	; 0x06
     2d0:	6f 81       	ldd	r22, Y+7	; 0x07
     2d2:	78 85       	ldd	r23, Y+8	; 0x08
     2d4:	8b e1       	ldi	r24, 0x1B	; 27
     2d6:	76 95       	lsr	r23
     2d8:	67 95       	ror	r22
     2da:	57 95       	ror	r21
     2dc:	47 95       	ror	r20
     2de:	8a 95       	dec	r24
     2e0:	d1 f7       	brne	.-12     	; 0x2d6 <__stack+0x77>
     2e2:	8d 81       	ldd	r24, Y+5	; 0x05
     2e4:	9e 81       	ldd	r25, Y+6	; 0x06
     2e6:	af 81       	ldd	r26, Y+7	; 0x07
     2e8:	b8 85       	ldd	r27, Y+8	; 0x08
     2ea:	68 94       	set
     2ec:	14 f8       	bld	r1, 4
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	aa 1f       	adc	r26, r26
     2f4:	bb 1f       	adc	r27, r27
     2f6:	16 94       	lsr	r1
     2f8:	d1 f7       	brne	.-12     	; 0x2ee <__stack+0x8f>
     2fa:	84 2b       	or	r24, r20
     2fc:	95 2b       	or	r25, r21
     2fe:	a6 2b       	or	r26, r22
     300:	b7 2b       	or	r27, r23
     302:	4d a1       	ldd	r20, Y+37	; 0x25
     304:	5e a1       	ldd	r21, Y+38	; 0x26
     306:	6f a1       	ldd	r22, Y+39	; 0x27
     308:	78 a5       	ldd	r23, Y+40	; 0x28
     30a:	84 0f       	add	r24, r20
     30c:	95 1f       	adc	r25, r21
     30e:	a6 1f       	adc	r26, r22
     310:	b7 1f       	adc	r27, r23
     312:	40 81       	ld	r20, Z
     314:	51 81       	ldd	r21, Z+1	; 0x01
     316:	62 81       	ldd	r22, Z+2	; 0x02
     318:	73 81       	ldd	r23, Z+3	; 0x03
     31a:	84 0f       	add	r24, r20
     31c:	95 1f       	adc	r25, r21
     31e:	a6 1f       	adc	r26, r22
     320:	b7 1f       	adc	r27, r23
     322:	84 0d       	add	r24, r4
     324:	95 1d       	adc	r25, r5
     326:	a6 1d       	adc	r26, r6
     328:	b7 1d       	adc	r27, r7
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:68
		if(i < 20)
		{
			temp += (b & c) | ((~b) & d);
     32a:	49 81       	ldd	r20, Y+1	; 0x01
     32c:	5a 81       	ldd	r21, Y+2	; 0x02
     32e:	6b 81       	ldd	r22, Y+3	; 0x03
     330:	7c 81       	ldd	r23, Y+4	; 0x04
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:66
								^ hasher->buffer.words[(i - 14)& 15]
								^ hasher->buffer.words[(i - 16)& 15]);
		}

		temp = sha1_rotl(5, a) + e + hasher->buffer.words[i & 15] + sha1_k(i);
		if(i < 20)
     332:	24 31       	cpi	r18, 0x14	; 20
     334:	08 f0       	brcs	.+2      	; 0x338 <__stack+0xd9>
     336:	01 c1       	rjmp	.+514    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:68
		{
			temp += (b & c) | ((~b) & d);
     338:	48 25       	eor	r20, r8
     33a:	59 25       	eor	r21, r9
     33c:	6a 25       	eor	r22, r10
     33e:	7b 25       	eor	r23, r11
     340:	4c 21       	and	r20, r12
     342:	5d 21       	and	r21, r13
     344:	6e 21       	and	r22, r14
     346:	7f 21       	and	r23, r15
     348:	48 25       	eor	r20, r8
     34a:	59 25       	eor	r21, r9
     34c:	6a 25       	eor	r22, r10
     34e:	7b 25       	eor	r23, r11
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:80
		{
			temp += (b & c) | (b & d) | (c & d);
		}
		else
		{
			temp += b ^ c ^ d;
     350:	84 0f       	add	r24, r20
     352:	95 1f       	adc	r25, r21
     354:	a6 1f       	adc	r26, r22
     356:	b7 1f       	adc	r27, r23
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:89



		e = d;
		d = c;
		c = sha1_rotl(30, b);
     358:	26 01       	movw	r4, r12
     35a:	37 01       	movw	r6, r14
     35c:	42 e0       	ldi	r20, 0x02	; 2
     35e:	76 94       	lsr	r7
     360:	67 94       	ror	r6
     362:	57 94       	ror	r5
     364:	47 94       	ror	r4
     366:	4a 95       	dec	r20
     368:	d1 f7       	brne	.-12     	; 0x35e <__stack+0xff>
     36a:	b7 01       	movw	r22, r14
     36c:	a6 01       	movw	r20, r12
     36e:	ee e1       	ldi	r30, 0x1E	; 30
     370:	44 0f       	add	r20, r20
     372:	55 1f       	adc	r21, r21
     374:	66 1f       	adc	r22, r22
     376:	77 1f       	adc	r23, r23
     378:	ea 95       	dec	r30
     37a:	d1 f7       	brne	.-12     	; 0x370 <__stack+0x111>
     37c:	44 29       	or	r20, r4
     37e:	55 29       	or	r21, r5
     380:	66 29       	or	r22, r6
     382:	77 29       	or	r23, r7
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:48
	b = hasher->state.words[1];
	c = hasher->state.words[2];
	d = hasher->state.words[3];
	e = hasher->state.words[4];

	for(i = 0; i < 80; i++)
     384:	2f 5f       	subi	r18, 0xFF	; 255
     386:	20 35       	cpi	r18, 0x50	; 80
     388:	09 f0       	breq	.+2      	; 0x38c <__stack+0x12d>
     38a:	61 c0       	rjmp	.+194    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:93
		d = c;
		c = sha1_rotl(30, b);
		b = a;
		a = temp;
	}
	hasher->state.words[0] += a;
     38c:	cd 84       	ldd	r12, Y+13	; 0x0d
     38e:	de 84       	ldd	r13, Y+14	; 0x0e
     390:	ef 84       	ldd	r14, Y+15	; 0x0f
     392:	f8 88       	ldd	r15, Y+16	; 0x10
     394:	8c 0d       	add	r24, r12
     396:	9d 1d       	adc	r25, r13
     398:	ae 1d       	adc	r26, r14
     39a:	bf 1d       	adc	r27, r15
     39c:	f8 01       	movw	r30, r16
     39e:	80 83       	st	Z, r24
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	a2 83       	std	Z+2, r26	; 0x02
     3a4:	b3 83       	std	Z+3, r27	; 0x03
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:94
	hasher->state.words[1] += b;
     3a6:	89 89       	ldd	r24, Y+17	; 0x11
     3a8:	9a 89       	ldd	r25, Y+18	; 0x12
     3aa:	ab 89       	ldd	r26, Y+19	; 0x13
     3ac:	bc 89       	ldd	r27, Y+20	; 0x14
     3ae:	cd 80       	ldd	r12, Y+5	; 0x05
     3b0:	de 80       	ldd	r13, Y+6	; 0x06
     3b2:	ef 80       	ldd	r14, Y+7	; 0x07
     3b4:	f8 84       	ldd	r15, Y+8	; 0x08
     3b6:	8c 0d       	add	r24, r12
     3b8:	9d 1d       	adc	r25, r13
     3ba:	ae 1d       	adc	r26, r14
     3bc:	bf 1d       	adc	r27, r15
     3be:	84 83       	std	Z+4, r24	; 0x04
     3c0:	95 83       	std	Z+5, r25	; 0x05
     3c2:	a6 83       	std	Z+6, r26	; 0x06
     3c4:	b7 83       	std	Z+7, r27	; 0x07
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:95
	hasher->state.words[2] += c;
     3c6:	cd 88       	ldd	r12, Y+21	; 0x15
     3c8:	de 88       	ldd	r13, Y+22	; 0x16
     3ca:	ef 88       	ldd	r14, Y+23	; 0x17
     3cc:	f8 8c       	ldd	r15, Y+24	; 0x18
     3ce:	4c 0d       	add	r20, r12
     3d0:	5d 1d       	adc	r21, r13
     3d2:	6e 1d       	adc	r22, r14
     3d4:	7f 1d       	adc	r23, r15
     3d6:	40 87       	std	Z+8, r20	; 0x08
     3d8:	51 87       	std	Z+9, r21	; 0x09
     3da:	62 87       	std	Z+10, r22	; 0x0a
     3dc:	73 87       	std	Z+11, r23	; 0x0b
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:96
	hasher->state.words[3] += d;
     3de:	89 8d       	ldd	r24, Y+25	; 0x19
     3e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     3e2:	ab 8d       	ldd	r26, Y+27	; 0x1b
     3e4:	bc 8d       	ldd	r27, Y+28	; 0x1c
     3e6:	c9 80       	ldd	r12, Y+1	; 0x01
     3e8:	da 80       	ldd	r13, Y+2	; 0x02
     3ea:	eb 80       	ldd	r14, Y+3	; 0x03
     3ec:	fc 80       	ldd	r15, Y+4	; 0x04
     3ee:	8c 0d       	add	r24, r12
     3f0:	9d 1d       	adc	r25, r13
     3f2:	ae 1d       	adc	r26, r14
     3f4:	bf 1d       	adc	r27, r15
     3f6:	84 87       	std	Z+12, r24	; 0x0c
     3f8:	95 87       	std	Z+13, r25	; 0x0d
     3fa:	a6 87       	std	Z+14, r26	; 0x0e
     3fc:	b7 87       	std	Z+15, r27	; 0x0f
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:97
	hasher->state.words[4] += e;
     3fe:	cd 8c       	ldd	r12, Y+29	; 0x1d
     400:	de 8c       	ldd	r13, Y+30	; 0x1e
     402:	ef 8c       	ldd	r14, Y+31	; 0x1f
     404:	f8 a0       	ldd	r15, Y+32	; 0x20
     406:	8c 0c       	add	r8, r12
     408:	9d 1c       	adc	r9, r13
     40a:	ae 1c       	adc	r10, r14
     40c:	bf 1c       	adc	r11, r15
     40e:	80 8a       	std	Z+16, r8	; 0x10
     410:	91 8a       	std	Z+17, r9	; 0x11
     412:	a2 8a       	std	Z+18, r10	; 0x12
     414:	b3 8a       	std	Z+19, r11	; 0x13
sha1_hasher_add_byte():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:110
	hasher->buffer.bytes[hasher->block_offset] = byte;
	hasher->block_offset++;
	if(hasher->block_offset == SHA1_BLOCK_LEN)
	{
		sha1_hash_block(hasher);
		hasher->block_offset = 0;
     416:	ec 5a       	subi	r30, 0xAC	; 172
     418:	ff 4f       	sbci	r31, 0xFF	; 255
     41a:	10 82       	st	Z, r1
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:112
	}
}
     41c:	a8 96       	adiw	r28, 0x28	; 40
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	de bf       	out	0x3e, r29	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	cd bf       	out	0x3d, r28	; 61
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	df 90       	pop	r13
     436:	cf 90       	pop	r12
     438:	bf 90       	pop	r11
     43a:	af 90       	pop	r10
     43c:	9f 90       	pop	r9
     43e:	8f 90       	pop	r8
     440:	7f 90       	pop	r7
     442:	6f 90       	pop	r6
     444:	5f 90       	pop	r5
     446:	4f 90       	pop	r4
     448:	3f 90       	pop	r3
     44a:	2f 90       	pop	r2
     44c:	08 95       	ret
     44e:	e2 2f       	mov	r30, r18
     450:	ef 70       	andi	r30, 0x0F	; 15
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	ee 0f       	add	r30, r30
     456:	ff 1f       	adc	r31, r31
     458:	ee 0f       	add	r30, r30
     45a:	ff 1f       	adc	r31, r31
     45c:	38 01       	movw	r6, r16
     45e:	6e 0e       	add	r6, r30
     460:	7f 1e       	adc	r7, r31
     462:	7a 86       	std	Y+10, r7	; 0x0a
     464:	69 86       	std	Y+9, r6	; 0x09
     466:	f3 01       	movw	r30, r6
     468:	c4 88       	ldd	r12, Z+20	; 0x14
     46a:	d5 88       	ldd	r13, Z+21	; 0x15
     46c:	e6 88       	ldd	r14, Z+22	; 0x16
     46e:	f7 88       	ldd	r15, Z+23	; 0x17
sha1_hash_block():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:56
		// This part of the computation omits the message schedule
		// W as described in https://tools.ietf.org/html/rfc4634
		// The first 16 words of the message schedule is just the block
		// anyways and the computation of the message schedule uses only
		// the last 16 words, so we can do that.
		if( i >= 16 )
     470:	20 31       	cpi	r18, 0x10	; 16
     472:	08 f4       	brcc	.+2      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     474:	4c c0       	rjmp	.+152    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:58
		{
			hasher->buffer.words[i & 15] = sha1_rotl(1
     476:	f1 01       	movw	r30, r2
     478:	35 97       	sbiw	r30, 0x05	; 5
     47a:	ef 70       	andi	r30, 0x0F	; 15
     47c:	ff 27       	eor	r31, r31
     47e:	35 96       	adiw	r30, 0x05	; 5
     480:	ee 0f       	add	r30, r30
     482:	ff 1f       	adc	r31, r31
     484:	ee 0f       	add	r30, r30
     486:	ff 1f       	adc	r31, r31
     488:	3f 01       	movw	r6, r30
     48a:	60 0e       	add	r6, r16
     48c:	71 1e       	adc	r7, r17
     48e:	7c a2       	std	Y+36, r7	; 0x24
     490:	6b a2       	std	Y+35, r6	; 0x23
     492:	31 01       	movw	r6, r2
     494:	ef e0       	ldi	r30, 0x0F	; 15
     496:	6e 22       	and	r6, r30
     498:	77 24       	eor	r7, r7
     49a:	f5 e0       	ldi	r31, 0x05	; 5
     49c:	6f 0e       	add	r6, r31
     49e:	71 1c       	adc	r7, r1
     4a0:	66 0c       	add	r6, r6
     4a2:	77 1c       	adc	r7, r7
     4a4:	66 0c       	add	r6, r6
     4a6:	77 1c       	adc	r7, r7
     4a8:	60 0e       	add	r6, r16
     4aa:	71 1e       	adc	r7, r17
     4ac:	f3 01       	movw	r30, r6
     4ae:	40 80       	ld	r4, Z
     4b0:	51 80       	ldd	r5, Z+1	; 0x01
     4b2:	62 80       	ldd	r6, Z+2	; 0x02
     4b4:	73 80       	ldd	r7, Z+3	; 0x03
     4b6:	c4 24       	eor	r12, r4
     4b8:	d5 24       	eor	r13, r5
     4ba:	e6 24       	eor	r14, r6
     4bc:	f7 24       	eor	r15, r7
     4be:	eb a1       	ldd	r30, Y+35	; 0x23
     4c0:	fc a1       	ldd	r31, Y+36	; 0x24
     4c2:	40 80       	ld	r4, Z
     4c4:	51 80       	ldd	r5, Z+1	; 0x01
     4c6:	62 80       	ldd	r6, Z+2	; 0x02
     4c8:	73 80       	ldd	r7, Z+3	; 0x03
     4ca:	c4 24       	eor	r12, r4
     4cc:	d5 24       	eor	r13, r5
     4ce:	e6 24       	eor	r14, r6
     4d0:	f7 24       	eor	r15, r7
     4d2:	f1 01       	movw	r30, r2
     4d4:	3b 97       	sbiw	r30, 0x0b	; 11
     4d6:	ef 70       	andi	r30, 0x0F	; 15
     4d8:	ff 27       	eor	r31, r31
     4da:	35 96       	adiw	r30, 0x05	; 5
     4dc:	ee 0f       	add	r30, r30
     4de:	ff 1f       	adc	r31, r31
     4e0:	ee 0f       	add	r30, r30
     4e2:	ff 1f       	adc	r31, r31
     4e4:	e0 0f       	add	r30, r16
     4e6:	f1 1f       	adc	r31, r17
     4e8:	40 80       	ld	r4, Z
     4ea:	51 80       	ldd	r5, Z+1	; 0x01
     4ec:	62 80       	ldd	r6, Z+2	; 0x02
     4ee:	73 80       	ldd	r7, Z+3	; 0x03
     4f0:	c4 24       	eor	r12, r4
     4f2:	d5 24       	eor	r13, r5
     4f4:	e6 24       	eor	r14, r6
     4f6:	f7 24       	eor	r15, r7
     4f8:	cc 0c       	add	r12, r12
     4fa:	dd 1c       	adc	r13, r13
     4fc:	ee 1c       	adc	r14, r14
     4fe:	ff 1c       	adc	r15, r15
     500:	c1 1c       	adc	r12, r1
     502:	e9 85       	ldd	r30, Y+9	; 0x09
     504:	fa 85       	ldd	r31, Y+10	; 0x0a
     506:	c4 8a       	std	Z+20, r12	; 0x14
     508:	d5 8a       	std	Z+21, r13	; 0x15
     50a:	e6 8a       	std	Z+22, r14	; 0x16
     50c:	f7 8a       	std	Z+23, r15	; 0x17
     50e:	ff ef       	ldi	r31, 0xFF	; 255
     510:	2f 1a       	sub	r2, r31
     512:	3f 0a       	sbc	r3, r31
sha1_hasher_add_byte():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:104
}



void sha1_hasher_add_byte(sha1_hasher_t hasher, uint8_t byte)
{
     514:	cd 80       	ldd	r12, Y+5	; 0x05
     516:	de 80       	ldd	r13, Y+6	; 0x06
     518:	ef 80       	ldd	r14, Y+7	; 0x07
     51a:	f8 84       	ldd	r15, Y+8	; 0x08
     51c:	24 01       	movw	r4, r8
     51e:	35 01       	movw	r6, r10
     520:	89 80       	ldd	r8, Y+1	; 0x01
     522:	9a 80       	ldd	r9, Y+2	; 0x02
     524:	ab 80       	ldd	r10, Y+3	; 0x03
     526:	bc 80       	ldd	r11, Y+4	; 0x04
sha1_hash_block():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:89



		e = d;
		d = c;
		c = sha1_rotl(30, b);
     528:	49 83       	std	Y+1, r20	; 0x01
     52a:	5a 83       	std	Y+2, r21	; 0x02
     52c:	6b 83       	std	Y+3, r22	; 0x03
     52e:	7c 83       	std	Y+4, r23	; 0x04
     530:	8d 83       	std	Y+5, r24	; 0x05
     532:	9e 83       	std	Y+6, r25	; 0x06
     534:	af 83       	std	Y+7, r26	; 0x07
     536:	b8 87       	std	Y+8, r27	; 0x08
     538:	ac ce       	rjmp	.-680    	; 0x292 <__stack+0x33>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:70
		temp = sha1_rotl(5, a) + e + hasher->buffer.words[i & 15] + sha1_k(i);
		if(i < 20)
		{
			temp += (b & c) | ((~b) & d);
		}
		else if(i < 40)
     53a:	28 32       	cpi	r18, 0x28	; 40
     53c:	48 f4       	brcc	.+18     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:80
		{
			temp += (b & c) | (b & d) | (c & d);
		}
		else
		{
			temp += b ^ c ^ d;
     53e:	48 25       	eor	r20, r8
     540:	59 25       	eor	r21, r9
     542:	6a 25       	eor	r22, r10
     544:	7b 25       	eor	r23, r11
     546:	4c 25       	eor	r20, r12
     548:	5d 25       	eor	r21, r13
     54a:	6e 25       	eor	r22, r14
     54c:	7f 25       	eor	r23, r15
     54e:	00 cf       	rjmp	.-512    	; 0x350 <__stack+0xf1>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:74
		}
		else if(i < 40)
		{
			temp += b ^ c ^ d;
		}
		else if(i < 60)
     550:	2c 33       	cpi	r18, 0x3C	; 60
     552:	a8 f7       	brcc	.-22     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:76
		{
			temp += (b & c) | (b & d) | (c & d);
     554:	48 29       	or	r20, r8
     556:	59 29       	or	r21, r9
     558:	6a 29       	or	r22, r10
     55a:	7b 29       	or	r23, r11
     55c:	4c 21       	and	r20, r12
     55e:	5d 21       	and	r21, r13
     560:	6e 21       	and	r22, r14
     562:	7f 21       	and	r23, r15
     564:	49 80       	ldd	r4, Y+1	; 0x01
     566:	5a 80       	ldd	r5, Y+2	; 0x02
     568:	6b 80       	ldd	r6, Y+3	; 0x03
     56a:	7c 80       	ldd	r7, Y+4	; 0x04
     56c:	48 20       	and	r4, r8
     56e:	59 20       	and	r5, r9
     570:	6a 20       	and	r6, r10
     572:	7b 20       	and	r7, r11
     574:	44 29       	or	r20, r4
     576:	55 29       	or	r21, r5
     578:	66 29       	or	r22, r6
     57a:	77 29       	or	r23, r7
     57c:	e9 ce       	rjmp	.-558    	; 0x350 <__stack+0xf1>

0000057e <Sha1Wrapper::write(unsigned char)>:
write():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch/sha1.cpp:40
}
#endif


size_t Sha1Wrapper::write(uint8_t byte)
{
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
sha1_hasher_putc():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:122
 * once the hasher has been pad'ed (this happens, when 
 * sha1_hasher_gethash or sha1_hasher_gethmac are invoced).
 * */
uint8_t sha1_hasher_putc(sha1_hasher_t hasher, uint8_t byte)
{
	if(hasher->_lock)
     582:	fc 01       	movw	r30, r24
     584:	ef 59       	subi	r30, 0x9F	; 159
     586:	ff 4f       	sbci	r31, 0xFF	; 255
     588:	20 81       	ld	r18, Z
     58a:	21 11       	cpse	r18, r1
     58c:	1e c0       	rjmp	.+60     	; 0x5ca <Sha1Wrapper::write(unsigned char)+0x4c>
     58e:	b6 2f       	mov	r27, r22
     590:	ec 01       	movw	r28, r24
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:126
	{
		return EOF;
	}
	hasher->total_bytes++;
     592:	38 97       	sbiw	r30, 0x08	; 8
     594:	20 81       	ld	r18, Z
     596:	31 81       	ldd	r19, Z+1	; 0x01
     598:	42 81       	ldd	r20, Z+2	; 0x02
     59a:	53 81       	ldd	r21, Z+3	; 0x03
     59c:	64 81       	ldd	r22, Z+4	; 0x04
     59e:	75 81       	ldd	r23, Z+5	; 0x05
     5a0:	86 81       	ldd	r24, Z+6	; 0x06
     5a2:	97 81       	ldd	r25, Z+7	; 0x07
     5a4:	a1 e0       	ldi	r26, 0x01	; 1
     5a6:	52 d9       	rcall	.-3420   	; 0xfffff84c <__eeprom_end+0xff7ef84c>
     5a8:	20 83       	st	Z, r18
     5aa:	31 83       	std	Z+1, r19	; 0x01
     5ac:	42 83       	std	Z+2, r20	; 0x02
     5ae:	53 83       	std	Z+3, r21	; 0x03
     5b0:	64 83       	std	Z+4, r22	; 0x04
     5b2:	75 83       	std	Z+5, r23	; 0x05
     5b4:	86 83       	std	Z+6, r24	; 0x06
     5b6:	97 83       	std	Z+7, r25	; 0x07
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:127
	sha1_hasher_add_byte(hasher, byte);
     5b8:	6b 2f       	mov	r22, r27
     5ba:	ce 01       	movw	r24, r28
     5bc:	04 96       	adiw	r24, 0x04	; 4
     5be:	d2 dd       	rcall	.-1116   	; 0x164 <sha1_hasher_add_byte(sha1_hasher_s*, unsigned char)>
write():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch/sha1.cpp:43
	if(sha1_hasher_putc(&_hasher, byte) == byte)
	{
		return 1;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch/sha1.cpp:46
	}
	return 0;
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch/sha1.cpp:41
#endif


size_t Sha1Wrapper::write(uint8_t byte)
{
	if(sha1_hasher_putc(&_hasher, byte) == byte)
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	6f 3f       	cpi	r22, 0xFF	; 255
     5d0:	c9 f3       	breq	.-14     	; 0x5c4 <Sha1Wrapper::write(unsigned char)+0x46>
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	f7 cf       	rjmp	.-18     	; 0x5c4 <Sha1Wrapper::write(unsigned char)+0x46>

000005d6 <digitalWrite.constprop.7>:
digitalWrite():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:152
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);

  if (val == LOW) {
     5d6:	81 11       	cpse	r24, r1
     5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <digitalWrite.constprop.7+0xe>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:153
    uint8_t oldSREG = SREG;
     5da:	8f b7       	in	r24, 0x3f	; 63
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:154
    cli();
     5dc:	f8 94       	cli
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:155
    *out &= ~bit;
     5de:	c3 98       	cbi	0x18, 3	; 24
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:161
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
    SREG = oldSREG;
     5e0:	8f bf       	out	0x3f, r24	; 63
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:163
  }
}
     5e2:	08 95       	ret
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:158
    uint8_t oldSREG = SREG;
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     5e4:	8f b7       	in	r24, 0x3f	; 63
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:159
    cli();
     5e6:	f8 94       	cli
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:160
    *out |= bit;
     5e8:	c3 9a       	sbi	0x18, 3	; 24
     5ea:	fa cf       	rjmp	.-12     	; 0x5e0 <digitalWrite.constprop.7+0xa>

000005ec <ledOn(unsigned char)>:
ledOn():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:85
  // Calculate elapsed time
  ducos1tim = uint16_t( millis() - startTime);
  runS = 'C';
}

void ledOn(byte n) {
     5ec:	cf 93       	push	r28
     5ee:	c8 2f       	mov	r28, r24
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:86
  digitalWrite(ledPin, HIGH);
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	f1 df       	rcall	.-30     	; 0x5d6 <digitalWrite.constprop.7>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:87
  ledCnt = n;
     5f4:	c0 93 25 01 	sts	0x0125, r28	; 0x800125 <ledCnt>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:88
}
     5f8:	cf 91       	pop	r28
     5fa:	08 95       	ret

000005fc <requestEvent()>:
requestEvent():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:155
  runS = 'B'; // busy until cmd processed
  slCmd = c;
}

void requestEvent() {
  for (byte k = 0; k < backP; k++) {
     5fc:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <backP>
write():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:507

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data) {
  if (transmitting) { // in master transmitter mode
     600:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <TwoWire::transmitting>
     604:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <TwoWire::BufferLength>
     608:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <TwoWire::BufferIndex>
     60c:	a2 e0       	ldi	r26, 0x02	; 2
     60e:	b1 e0       	ldi	r27, 0x01	; 1
requestEvent():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:155
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	63 17       	cp	r22, r19
     614:	31 f1       	breq	.+76     	; 0x662 <requestEvent()+0x66>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:156
    Wire.write(backBuf[k]);
     616:	5d 91       	ld	r21, X+
write():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:507
     618:	77 23       	and	r23, r23
     61a:	59 f0       	breq	.+22     	; 0x632 <requestEvent()+0x36>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:509
    // don't bother if buffer is full
    if (BufferLength >= TWI_BUFFER_SIZE) {
     61c:	20 32       	cpi	r18, 0x20	; 32
     61e:	38 f4       	brcc	.+14     	; 0x62e <requestEvent()+0x32>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:513
      return 0;
    }
    // put byte in tx buffer
    Buffer[BufferIndex] = data;
     620:	e9 2f       	mov	r30, r25
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	ea 58       	subi	r30, 0x8A	; 138
     626:	ff 4f       	sbci	r31, 0xFF	; 255
     628:	50 83       	st	Z, r21
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:514
    ++BufferIndex;
     62a:	9f 5f       	subi	r25, 0xFF	; 255
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:516
    // update amount in buffer
    BufferLength = BufferIndex;
     62c:	29 2f       	mov	r18, r25
requestEvent():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:155
  runS = 'B'; // busy until cmd processed
  slCmd = c;
}

void requestEvent() {
  for (byte k = 0; k < backP; k++) {
     62e:	3f 5f       	subi	r19, 0xFF	; 255
     630:	f0 cf       	rjmp	.-32     	; 0x612 <requestEvent()+0x16>
USI_TWI_Space_In_Transmission_Buffer():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
     632:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <TWI_TxHead>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
     636:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <TWI_TxTail>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
     63a:	4f 5f       	subi	r20, 0xFF	; 255
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
     63c:	84 1b       	sub	r24, r20
     63e:	8f 70       	andi	r24, 0x0F	; 15
write():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:519
  } else { // in slave send mode
    // don't bother if buffer is full
    if (!USI_TWI_Space_In_Transmission_Buffer()) {
     640:	b1 f3       	breq	.-20     	; 0x62e <requestEvent()+0x32>
USI_TWI_Transmit_Byte():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:100
// Puts data in the transmission buffer, Waits if buffer is full.
void USI_TWI_Transmit_Byte(unsigned char data)
{
  unsigned char tmphead;

  tmphead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate buffer index.
     642:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <TWI_TxHead>
     646:	8f 5f       	subi	r24, 0xFF	; 255
     648:	8f 70       	andi	r24, 0x0F	; 15
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:101
  while (tmphead == TWI_TxTail)
     64a:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <TWI_TxTail>
     64e:	84 17       	cp	r24, r20
     650:	e1 f3       	breq	.-8      	; 0x64a <requestEvent()+0x4e>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:103
    ;                         // Wait for free space in buffer.
  TWI_TxBuf[tmphead] = data;    // Store data in buffer.
     652:	e8 2f       	mov	r30, r24
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	ea 57       	subi	r30, 0x7A	; 122
     658:	ff 4f       	sbci	r31, 0xFF	; 255
     65a:	50 83       	st	Z, r21
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:104
  TWI_TxHead         = tmphead; // Store new index.
     65c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <TWI_TxHead>
     660:	e6 cf       	rjmp	.-52     	; 0x62e <requestEvent()+0x32>
     662:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <TwoWire::BufferIndex>
     666:	20 93 4e 01 	sts	0x014E, r18	; 0x80014e <TwoWire::BufferLength>
requestEvent():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:158
    Wire.write(backBuf[k]);
  }
  ledOn(1);
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	bf cf       	rjmp	.-130    	; 0x5ec <ledOn(unsigned char)>

0000066e <setup>:
pinMode():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:57
                cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     66e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:58
                cli();
     670:	f8 94       	cli
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:59
    *reg |= bit;
     672:	bb 9a       	sbi	0x17, 3	; 23
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:60
    SREG = oldSREG;
     674:	8f bf       	out	0x3f, r24	; 63
setup():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:210
}

void setup() {
  pinMode(ledPin, OUTPUT);
  //check:
  ledOn(1);
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	b9 df       	rcall	.-142    	; 0x5ec <ledOn(unsigned char)>
begin():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:373

  USI_TWI_Master_Initialise();
}

void TwoWire::begin(uint8_t address) {
  BufferIndex = 0;
     67a:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <TwoWire::BufferIndex>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:374
  BufferLength = 0;
     67e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <TwoWire::BufferLength>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:375
  transmitting = 0;
     682:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <TwoWire::transmitting>
Flush_TWI_Buffers():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:54
static volatile uint8_t TWI_TxHead;
static volatile uint8_t TWI_TxTail;

void Flush_TWI_Buffers(void)
{
  TWI_RxTail = 0;
     686:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <TWI_RxTail>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:55
  TWI_RxHead = 0;
     68a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <TWI_RxHead>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:56
  TWI_TxTail = 0;
     68e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <TWI_TxTail>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:57
  TWI_TxHead = 0;
     692:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <TWI_TxHead>
USI_TWI_Slave_Initialise():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:69
----------------------------------------------------------*/
void USI_TWI_Slave_Initialise(unsigned char TWI_ownAddress)
{
  Flush_TWI_Buffers();

  TWI_slaveAddress = TWI_ownAddress;
     696:	84 e1       	ldi	r24, 0x14	; 20
     698:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <TWI_slaveAddress>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:71

  USI_TWI_On_Slave_Transmit = 0;
     69c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <USI_TWI_On_Slave_Transmit+0x1>
     6a0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <USI_TWI_On_Slave_Transmit>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:72
  USI_TWI_On_Slave_Receive = 0;
     6a4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USI_TWI_On_Slave_Receive+0x1>
     6a8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <USI_TWI_On_Slave_Receive>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:74

  PORT_USI_CL |= (1 << PORT_USI_SCL);     // Set SCL high
     6ac:	c2 9a       	sbi	0x18, 2	; 24
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:75
  PORT_USI |= (1 << PORT_USI_SDA);        // Set SDA high
     6ae:	c0 9a       	sbi	0x18, 0	; 24
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:76
  DDR_USI_CL |= (1 << PORT_USI_SCL);      // Set SCL as output
     6b0:	ba 9a       	sbi	0x17, 2	; 23
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:77
  DDR_USI &= ~(1 << PORT_USI_SDA);        // Set SDA as input
     6b2:	b8 98       	cbi	0x17, 0	; 23
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:78
  USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     6b4:	88 ea       	ldi	r24, 0xA8	; 168
     6b6:	8d b9       	out	0x0d, r24	; 13
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:83
          (1 << USIWM1) | (0 << USIWM0) | // Set USI in Two-wire mode. No USI Counter overflow prior
                                          // to first Start Condition (potential failure)
          (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
          (0 << USITC);
  USISR = 0xF0; // Clear all flags and reset overflow counter
     6b8:	80 ef       	ldi	r24, 0xF0	; 240
     6ba:	8e b9       	out	0x0e, r24	; 14
onReceive():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:600
  // XXX: to be implemented.
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) ) {
  USI_TWI_On_Slave_Receive = function;
     6bc:	82 e2       	ldi	r24, 0x22	; 34
     6be:	94 e0       	ldi	r25, 0x04	; 4
     6c0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <USI_TWI_On_Slave_Receive+0x1>
     6c4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <USI_TWI_On_Slave_Receive>
onRequest():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:605
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) ) {
  USI_TWI_On_Slave_Transmit = function;
     6c8:	8e ef       	ldi	r24, 0xFE	; 254
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <USI_TWI_On_Slave_Transmit+0x1>
     6d0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USI_TWI_On_Slave_Transmit>
setup():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:214
  Wire.begin(myAdr);
  Wire.onReceive(receiveEvent);
  Wire.onRequest(requestEvent);
}
     6d4:	08 95       	ret

000006d6 <String::toUpperCase()>:
toUpperCase():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:712
    *p = tolower(*p);
  }
}

void String::toUpperCase(void)
{
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:713
  if (!buffer) return;
     6da:	fc 01       	movw	r30, r24
     6dc:	c0 81       	ld	r28, Z
     6de:	d1 81       	ldd	r29, Z+1	; 0x01
     6e0:	20 97       	sbiw	r28, 0x00	; 0
     6e2:	59 f0       	breq	.+22     	; 0x6fa <String::toUpperCase()+0x24>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:714
  for (char *p = buffer; *p; p++) {
     6e4:	89 91       	ld	r24, Y+
     6e6:	88 23       	and	r24, r24
     6e8:	41 f0       	breq	.+16     	; 0x6fa <String::toUpperCase()+0x24>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:715
    *p = toupper(*p);
     6ea:	08 2e       	mov	r0, r24
     6ec:	00 0c       	add	r0, r0
     6ee:	99 0b       	sbc	r25, r25
     6f0:	ae da       	rcall	.-2724   	; 0xfffffc4e <__eeprom_end+0xff7efc4e>
     6f2:	fe 01       	movw	r30, r28
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	80 83       	st	Z, r24
     6f8:	f5 cf       	rjmp	.-22     	; 0x6e4 <String::toUpperCase()+0xe>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:717
  }
}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <String::reserve(unsigned int)>:
reserve():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:146
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	ec 01       	movw	r28, r24
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:147
  if (buffer && capacity >= size) return 1;
     70a:	88 81       	ld	r24, Y
     70c:	99 81       	ldd	r25, Y+1	; 0x01
     70e:	00 97       	sbiw	r24, 0x00	; 0
     710:	59 f0       	breq	.+22     	; 0x728 <String::reserve(unsigned int)+0x28>
     712:	2a 81       	ldd	r18, Y+2	; 0x02
     714:	3b 81       	ldd	r19, Y+3	; 0x03
     716:	26 17       	cp	r18, r22
     718:	37 07       	cpc	r19, r23
     71a:	30 f0       	brcs	.+12     	; 0x728 <String::reserve(unsigned int)+0x28>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     71c:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:153
    return 1;
  }
  return 0;
}
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	08 95       	ret
     728:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     72a:	6f 5f       	subi	r22, 0xFF	; 255
     72c:	7f 4f       	sbci	r23, 0xFF	; 255
     72e:	d9 d9       	rcall	.-3150   	; 0xfffffae2 <__eeprom_end+0xff7efae2>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:158
  if (newbuffer) {
     730:	00 97       	sbiw	r24, 0x00	; 0
     732:	59 f0       	breq	.+22     	; 0x74a <String::reserve(unsigned int)+0x4a>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:159
    buffer = newbuffer;
     734:	99 83       	std	Y+1, r25	; 0x01
     736:	88 83       	st	Y, r24
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:160
    capacity = maxStrLen;
     738:	1b 83       	std	Y+3, r17	; 0x03
     73a:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     73c:	2c 81       	ldd	r18, Y+4	; 0x04
     73e:	3d 81       	ldd	r19, Y+5	; 0x05
     740:	23 2b       	or	r18, r19
     742:	61 f7       	brne	.-40     	; 0x71c <String::reserve(unsigned int)+0x1c>
     744:	fc 01       	movw	r30, r24
     746:	10 82       	st	Z, r1
     748:	e9 cf       	rjmp	.-46     	; 0x71c <String::reserve(unsigned int)+0x1c>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:152
    return 1;
  }
  return 0;
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	e8 cf       	rjmp	.-48     	; 0x71e <String::reserve(unsigned int)+0x1e>

0000074e <String::concat(char)>:
concat():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:281
  if (!cstr) return 0;
  return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
{
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	00 d0       	rcall	.+0      	; 0x75c <String::concat(char)+0xe>
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	8c 01       	movw	r16, r24
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:283
  char buf[2];
  buf[0] = c;
     762:	69 83       	std	Y+1, r22	; 0x01
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:284
  buf[1] = 0;
     764:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
     766:	fc 01       	movw	r30, r24
     768:	e4 80       	ldd	r14, Z+4	; 0x04
     76a:	f5 80       	ldd	r15, Z+5	; 0x05
     76c:	ff ef       	ldi	r31, 0xFF	; 255
     76e:	ef 1a       	sub	r14, r31
     770:	ff 0a       	sbc	r15, r31
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
     772:	b7 01       	movw	r22, r14
     774:	c5 df       	rcall	.-118    	; 0x700 <String::reserve(unsigned int)>
     776:	88 23       	and	r24, r24
     778:	79 f0       	breq	.+30     	; 0x798 <String::concat(char)+0x4a>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:269
  strcpy(buffer + len, cstr);
     77a:	f8 01       	movw	r30, r16
     77c:	20 81       	ld	r18, Z
     77e:	31 81       	ldd	r19, Z+1	; 0x01
     780:	84 81       	ldd	r24, Z+4	; 0x04
     782:	95 81       	ldd	r25, Z+5	; 0x05
     784:	be 01       	movw	r22, r28
     786:	6f 5f       	subi	r22, 0xFF	; 255
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	82 0f       	add	r24, r18
     78c:	93 1f       	adc	r25, r19
     78e:	7d da       	rcall	.-2822   	; 0xfffffc8a <__eeprom_end+0xff7efc8a>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:270
  len = newlen;
     790:	f8 01       	movw	r30, r16
     792:	f5 82       	std	Z+5, r15	; 0x05
     794:	e4 82       	std	Z+4, r14	; 0x04
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:271
  return 1;
     796:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:286
{
  char buf[2];
  buf[0] = c;
  buf[1] = 0;
  return concat(buf, 1);
}
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	ef 90       	pop	r14
     7a8:	08 95       	ret

000007aa <String::invalidate()>:
invalidate():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	ec 01       	movw	r28, r24
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:140
  if (buffer) free(buffer);
     7b0:	88 81       	ld	r24, Y
     7b2:	99 81       	ldd	r25, Y+1	; 0x01
     7b4:	00 97       	sbiw	r24, 0x00	; 0
     7b6:	09 f0       	breq	.+2      	; 0x7ba <String::invalidate()+0x10>
     7b8:	0b d9       	rcall	.-3562   	; 0xfffff9d0 <__eeprom_end+0xff7ef9d0>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:141
  buffer = NULL;
     7ba:	19 82       	std	Y+1, r1	; 0x01
     7bc:	18 82       	st	Y, r1
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:142
  capacity = len = 0;
     7be:	1d 82       	std	Y+5, r1	; 0x05
     7c0:	1c 82       	std	Y+4, r1	; 0x04
     7c2:	1b 82       	std	Y+3, r1	; 0x03
     7c4:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:143
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <String::copy(char const*, unsigned int)>:
copy():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	ec 01       	movw	r28, r24
     7da:	7b 01       	movw	r14, r22
     7dc:	8a 01       	movw	r16, r20
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:172
  if (!reserve(length)) {
     7de:	ba 01       	movw	r22, r20
     7e0:	8f df       	rcall	.-226    	; 0x700 <String::reserve(unsigned int)>
     7e2:	81 11       	cpse	r24, r1
     7e4:	0a c0       	rjmp	.+20     	; 0x7fa <String::copy(char const*, unsigned int)+0x2e>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:173
    invalidate();
     7e6:	ce 01       	movw	r24, r28
     7e8:	e0 df       	rcall	.-64     	; 0x7aa <String::invalidate()>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:179
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
     7ea:	ce 01       	movw	r24, r28
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	08 95       	ret
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     7fa:	1d 83       	std	Y+5, r17	; 0x05
     7fc:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:177
  strcpy(buffer, cstr);
     7fe:	b7 01       	movw	r22, r14
     800:	88 81       	ld	r24, Y
     802:	99 81       	ldd	r25, Y+1	; 0x01
     804:	42 da       	rcall	.-2940   	; 0xfffffc8a <__eeprom_end+0xff7efc8a>
     806:	f1 cf       	rjmp	.-30     	; 0x7ea <String::copy(char const*, unsigned int)+0x1e>

00000808 <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc.part.3():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
     808:	fb 01       	movw	r30, r22
     80a:	01 90       	ld	r0, Z+
     80c:	00 20       	and	r0, r0
     80e:	e9 f7       	brne	.-6      	; 0x80a <String::operator=(char const*) [clone .part.3]+0x2>
     810:	31 97       	sbiw	r30, 0x01	; 1
     812:	af 01       	movw	r20, r30
     814:	46 1b       	sub	r20, r22
     816:	57 0b       	sbc	r21, r23
     818:	d9 cf       	rjmp	.-78     	; 0x7cc <String::copy(char const*, unsigned int)>

0000081a <String::operator=(String const&)>:
operator=():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:215
  rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	ec 01       	movw	r28, r24
     820:	fb 01       	movw	r30, r22
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:216
  if (this == &rhs) return *this;
     822:	86 17       	cp	r24, r22
     824:	97 07       	cpc	r25, r23
     826:	41 f0       	breq	.+16     	; 0x838 <String::operator=(String const&)+0x1e>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:218

  if (rhs.buffer) copy(rhs.buffer, rhs.len);
     828:	60 81       	ld	r22, Z
     82a:	71 81       	ldd	r23, Z+1	; 0x01
     82c:	61 15       	cp	r22, r1
     82e:	71 05       	cpc	r23, r1
     830:	39 f0       	breq	.+14     	; 0x840 <String::operator=(String const&)+0x26>
     832:	44 81       	ldd	r20, Z+4	; 0x04
     834:	55 81       	ldd	r21, Z+5	; 0x05
     836:	ca df       	rcall	.-108    	; 0x7cc <String::copy(char const*, unsigned int)>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:222
  else invalidate();

  return *this;
}
     838:	ce 01       	movw	r24, r28
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	08 95       	ret
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:219
String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;

  if (rhs.buffer) copy(rhs.buffer, rhs.len);
  else invalidate();
     840:	b4 df       	rcall	.-152    	; 0x7aa <String::invalidate()>
     842:	fa cf       	rjmp	.-12     	; 0x838 <String::operator=(String const&)+0x1e>

00000844 <receiveEvent(int)>:
receiveEvent():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:130
// R   *  provide Result
// S   *  provide Status                    runS runR slCmd
// T      teach in              Tb8
// V      set twi Adr nummer    Vb8         -

void receiveEvent(int howMany) {
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	64 97       	sbiw	r28, 0x14	; 20
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:131
  ledOn(1);
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	c6 de       	rcall	.-628    	; 0x5ec <ledOn(unsigned char)>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:134
  //if (howMany == 0) return;
  char c;
  c = Wire.read();
     860:	47 dc       	rcall	.-1906   	; 0xf0 <TwoWire::read() [clone .constprop.5]>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:135
  if (c == 'S') {  //status return immediately
     862:	83 35       	cpi	r24, 0x53	; 83
     864:	d1 f4       	brne	.+52     	; 0x89a <receiveEvent(int)+0x56>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:136
    backP = 3;
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <backP>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:137
    backBuf[0] = runS;
     86c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     870:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <backBuf>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:138
    backBuf[1] = runR;
     874:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <runR>
     878:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <backBuf+0x1>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:139
    backBuf[2] = slCmd;
     87c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <slCmd>
     880:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <backBuf+0x2>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:152
    provide16(ducos1tim);
    return;
  }
  runS = 'B'; // busy until cmd processed
  slCmd = c;
}
     884:	64 96       	adiw	r28, 0x14	; 20
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	08 95       	ret
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:142
    backBuf[0] = runS;
    backBuf[1] = runR;
    backBuf[2] = slCmd;
    return;
  }
  if (c == 'R') {  //result return immediately
     89a:	82 35       	cpi	r24, 0x52	; 82
     89c:	c9 f4       	brne	.+50     	; 0x8d0 <receiveEvent(int)+0x8c>
provide16():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:106
}

void provide16(uint16_t num) {
  // puts num to backBu, num readable len5 no \0
  char str[20];
  sprintf(str, "%5u", num);
     89e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ducos1result+0x1>
     8a2:	8f 93       	push	r24
     8a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ducos1result>
     8a8:	8f 93       	push	r24
     8aa:	81 e7       	ldi	r24, 0x71	; 113
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	9f 93       	push	r25
     8b0:	8f 93       	push	r24
     8b2:	8e 01       	movw	r16, r28
     8b4:	0f 5f       	subi	r16, 0xFF	; 255
     8b6:	1f 4f       	sbci	r17, 0xFF	; 255
     8b8:	1f 93       	push	r17
     8ba:	0f 93       	push	r16
     8bc:	ed d9       	rcall	.-3110   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:107
  provideStr(str);
     8be:	c8 01       	movw	r24, r16
     8c0:	41 dc       	rcall	.-1918   	; 0x144 <provideStr(char const*)>
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	da cf       	rjmp	.-76     	; 0x884 <receiveEvent(int)+0x40>
receiveEvent():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:146
  }
  if (c == 'R') {  //result return immediately
    provide16(ducos1result);
    return;
  }
  if (c == 'E') {  //elapsed return immediately
     8d0:	85 34       	cpi	r24, 0x45	; 69
     8d2:	31 f4       	brne	.+12     	; 0x8e0 <receiveEvent(int)+0x9c>
provide16():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:106
}

void provide16(uint16_t num) {
  // puts num to backBu, num readable len5 no \0
  char str[20];
  sprintf(str, "%5u", num);
     8d4:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <ducos1tim+0x1>
     8d8:	8f 93       	push	r24
     8da:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <ducos1tim>
     8de:	e4 cf       	rjmp	.-56     	; 0x8a8 <receiveEvent(int)+0x64>
receiveEvent():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:150
  }
  if (c == 'E') {  //elapsed return immediately
    provide16(ducos1tim);
    return;
  }
  runS = 'B'; // busy until cmd processed
     8e0:	92 e4       	ldi	r25, 0x42	; 66
     8e2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:151
  slCmd = c;
     8e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <slCmd>
     8ea:	cc cf       	rjmp	.-104    	; 0x884 <receiveEvent(int)+0x40>

000008ec <hashme()>:
hashme():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:75

void setEprom() {
  byte adr = 0;
}

void hashme() {
     8ec:	2f 92       	push	r2
     8ee:	3f 92       	push	r3
     8f0:	4f 92       	push	r4
     8f2:	5f 92       	push	r5
     8f4:	6f 92       	push	r6
     8f6:	7f 92       	push	r7
     8f8:	8f 92       	push	r8
     8fa:	9f 92       	push	r9
     8fc:	af 92       	push	r10
     8fe:	bf 92       	push	r11
     900:	cf 92       	push	r12
     902:	df 92       	push	r13
     904:	ef 92       	push	r14
     906:	ff 92       	push	r15
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	a3 97       	sbiw	r28, 0x23	; 35
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
millis():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:341
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
     920:	8f b7       	in	r24, 0x3f	; 63
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:345

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
     922:	f8 94       	cli
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:346
    m = millis_timer_millis;
     924:	40 90 21 01 	lds	r4, 0x0121	; 0x800121 <millis_timer_millis>
     928:	50 90 22 01 	lds	r5, 0x0122	; 0x800122 <millis_timer_millis+0x1>
     92c:	60 90 23 01 	lds	r6, 0x0123	; 0x800123 <millis_timer_millis+0x2>
     930:	70 90 24 01 	lds	r7, 0x0124	; 0x800124 <millis_timer_millis+0x3>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:347
    SREG = oldSREG;
     934:	8f bf       	out	0x3f, r24	; 63
hashme():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:78
  unsigned long startTime = millis();
  // Call DUCO-S1A hasher
  newblockhash.toUpperCase();
     936:	85 e0       	ldi	r24, 0x05	; 5
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	cd de       	rcall	.-614    	; 0x6d6 <String::toUpperCase()>
_ZN6String4initEv():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     93c:	1f 8e       	std	Y+31, r1	; 0x1f
     93e:	1e 8e       	std	Y+30, r1	; 0x1e
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:134
  capacity = 0;
     940:	19 a2       	std	Y+33, r1	; 0x21
     942:	18 a2       	std	Y+32, r1	; 0x20
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:135
  len = 0;
     944:	1b a2       	std	Y+35, r1	; 0x23
     946:	1a a2       	std	Y+34, r1	; 0x22
__base_ctor ():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:37
}

String::String(const String &value)
{
  init();
  *this = value;
     948:	65 e0       	ldi	r22, 0x05	; 5
     94a:	72 e0       	ldi	r23, 0x02	; 2
     94c:	ce 01       	movw	r24, r28
     94e:	4e 96       	adiw	r24, 0x1e	; 30
     950:	64 df       	rcall	.-312    	; 0x81a <String::operator=(String const&)>
_ZN6String4initEv():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     952:	19 8e       	std	Y+25, r1	; 0x19
     954:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:134
  capacity = 0;
     956:	1b 8e       	std	Y+27, r1	; 0x1b
     958:	1a 8e       	std	Y+26, r1	; 0x1a
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:135
  len = 0;
     95a:	1d 8e       	std	Y+29, r1	; 0x1d
     95c:	1c 8e       	std	Y+28, r1	; 0x1c
__base_ctor ():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:37
}

String::String(const String &value)
{
  init();
  *this = value;
     95e:	6b e0       	ldi	r22, 0x0B	; 11
     960:	72 e0       	ldi	r23, 0x02	; 2
     962:	ce 01       	movw	r24, r28
     964:	48 96       	adiw	r24, 0x18	; 24
     966:	59 df       	rcall	.-334    	; 0x81a <String::operator=(String const&)>
ducos1a():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:38

uint16_t ducos1a(String lastblockhash, String newblockhash, uint16_t difficulty)

{
  // DUCO-S1 algorithm implementation for AVR boards (DUCO-S1A)
  newblockhash.toUpperCase();
     968:	ce 01       	movw	r24, r28
     96a:	4e 96       	adiw	r24, 0x1e	; 30
     96c:	b4 de       	rcall	.-664    	; 0x6d6 <String::toUpperCase()>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:40
  const char *c = newblockhash.c_str();
  size_t final_len = newblockhash.length() >> 1;
     96e:	0a a1       	ldd	r16, Y+34	; 0x22
     970:	1b a1       	ldd	r17, Y+35	; 0x23
     972:	16 95       	lsr	r17
     974:	07 95       	ror	r16
     976:	ee 8d       	ldd	r30, Y+30	; 0x1e
     978:	ff 8d       	ldd	r31, Y+31	; 0x1f
     97a:	26 e9       	ldi	r18, 0x96	; 150
     97c:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:42
  for (size_t i = 0, j = 0; j < final_len; i += 2, j++)
    job[j] = ((((c[i] & 0x1F) + 9) % 25) << 4) + ((c[i + 1] & 0x1F) + 9) % 25;
     97e:	69 e1       	ldi	r22, 0x19	; 25
     980:	e6 2e       	mov	r14, r22
     982:	f1 2c       	mov	r15, r1
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:41
{
  // DUCO-S1 algorithm implementation for AVR boards (DUCO-S1A)
  newblockhash.toUpperCase();
  const char *c = newblockhash.c_str();
  size_t final_len = newblockhash.length() >> 1;
  for (size_t i = 0, j = 0; j < final_len; i += 2, j++)
     984:	c9 01       	movw	r24, r18
     986:	86 59       	subi	r24, 0x96	; 150
     988:	90 40       	sbci	r25, 0x00	; 0
     98a:	80 17       	cp	r24, r16
     98c:	91 07       	cpc	r25, r17
     98e:	c8 f4       	brcc	.+50     	; 0x9c2 <hashme()+0xd6>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:42
    job[j] = ((((c[i] & 0x1F) + 9) % 25) << 4) + ((c[i + 1] & 0x1F) + 9) % 25;
     990:	80 81       	ld	r24, Z
     992:	8f 71       	andi	r24, 0x1F	; 31
     994:	08 2e       	mov	r0, r24
     996:	00 0c       	add	r0, r0
     998:	99 0b       	sbc	r25, r25
     99a:	09 96       	adiw	r24, 0x09	; 9
     99c:	b7 01       	movw	r22, r14
     99e:	06 d7       	rcall	.+3596   	; 0x17ac <__divmodhi4>
     9a0:	48 2f       	mov	r20, r24
     9a2:	42 95       	swap	r20
     9a4:	40 7f       	andi	r20, 0xF0	; 240
     9a6:	81 81       	ldd	r24, Z+1	; 0x01
     9a8:	8f 71       	andi	r24, 0x1F	; 31
     9aa:	08 2e       	mov	r0, r24
     9ac:	00 0c       	add	r0, r0
     9ae:	99 0b       	sbc	r25, r25
     9b0:	09 96       	adiw	r24, 0x09	; 9
     9b2:	b7 01       	movw	r22, r14
     9b4:	fb d6       	rcall	.+3574   	; 0x17ac <__divmodhi4>
     9b6:	48 0f       	add	r20, r24
     9b8:	d9 01       	movw	r26, r18
     9ba:	4d 93       	st	X+, r20
     9bc:	9d 01       	movw	r18, r26
     9be:	32 96       	adiw	r30, 0x02	; 2
     9c0:	e1 cf       	rjmp	.-62     	; 0x984 <hashme()+0x98>
hashme():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:49
  // Difficulty loop
#ifdef ARDUINO_ARCH_AVR
  // If the difficulty is too high for AVR architecture then return 0
  if (difficulty > 655)
    return 0;
  for (uint16_t ducos1res = 0; ducos1res < difficulty * 100 + 1; ducos1res++)
     9c2:	f1 2c       	mov	r15, r1
     9c4:	e1 2c       	mov	r14, r1
     9c6:	37 e6       	ldi	r19, 0x67	; 103
     9c8:	23 2e       	mov	r2, r19
     9ca:	31 e0       	ldi	r19, 0x01	; 1
     9cc:	33 2e       	mov	r3, r19
     9ce:	43 e6       	ldi	r20, 0x63	; 99
     9d0:	84 2e       	mov	r8, r20
     9d2:	41 e0       	ldi	r20, 0x01	; 1
     9d4:	94 2e       	mov	r9, r20
     9d6:	8e e2       	ldi	r24, 0x2E	; 46
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a3 e5       	ldi	r26, 0x53	; 83
     9dc:	b1 e0       	ldi	r27, 0x01	; 1
     9de:	2f e4       	ldi	r18, 0x4F	; 79
     9e0:	c2 2e       	mov	r12, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	d2 2e       	mov	r13, r18
sha1_hasher_init():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/types.c:39
{
#ifdef __AVR__
	uint8_t i;
	for(i = 0; i < SHA1_HASH_LEN / 4; i++)
	{
		hasher->state.words[i] = pgm_read_dword(sha1_init_state + i);
     9e6:	fc 01       	movw	r30, r24
     9e8:	45 91       	lpm	r20, Z+
     9ea:	55 91       	lpm	r21, Z+
     9ec:	65 91       	lpm	r22, Z+
     9ee:	74 91       	lpm	r23, Z
     9f0:	4d 93       	st	X+, r20
     9f2:	5d 93       	st	X+, r21
     9f4:	6d 93       	st	X+, r22
     9f6:	7d 93       	st	X+, r23
     9f8:	04 96       	adiw	r24, 0x04	; 4
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/types.c:37

void sha1_hasher_init(sha1_hasher_t hasher)
{
#ifdef __AVR__
	uint8_t i;
	for(i = 0; i < SHA1_HASH_LEN / 4; i++)
     9fa:	2a 16       	cp	r2, r26
     9fc:	3b 06       	cpc	r3, r27
     9fe:	99 f7       	brne	.-26     	; 0x9e6 <hashme()+0xfa>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/types.c:44
		hasher->state.words[i] = pgm_read_dword(sha1_init_state + i);
	}
#else
	memcpy(hasher->state.words, sha1_init_state, SHA1_HASH_LEN);
#endif
	hasher->block_offset = 0;
     a00:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <Sha1+0x58>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/types.c:45
	hasher->total_bytes = 0;
     a04:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <Sha1+0x59>
     a08:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <Sha1+0x5a>
     a0c:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <Sha1+0x5b>
     a10:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <Sha1+0x5c>
     a14:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <Sha1+0x5d>
     a18:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <Sha1+0x5e>
     a1c:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <Sha1+0x5f>
     a20:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <Sha1+0x60>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/types.c:46
	hasher->_lock = 0;
     a24:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <Sha1+0x61>
_ZN6String4initEv():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     a28:	1b 8a       	std	Y+19, r1	; 0x13
     a2a:	1a 8a       	std	Y+18, r1	; 0x12
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:134
  capacity = 0;
     a2c:	1d 8a       	std	Y+21, r1	; 0x15
     a2e:	1c 8a       	std	Y+20, r1	; 0x14
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:135
  len = 0;
     a30:	1f 8a       	std	Y+23, r1	; 0x17
     a32:	1e 8a       	std	Y+22, r1	; 0x16
utoa():
c:\users\hh\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include/stdlib.h:527
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
     a34:	4a e0       	ldi	r20, 0x0A	; 10
     a36:	be 01       	movw	r22, r28
     a38:	6f 5f       	subi	r22, 0xFF	; 255
     a3a:	7f 4f       	sbci	r23, 0xFF	; 255
     a3c:	c7 01       	movw	r24, r14
     a3e:	d0 d3       	rcall	.+1952   	; 0x11e0 <__utoa_ncheck>
operator=():
     a40:	be 01       	movw	r22, r28
     a42:	6f 5f       	subi	r22, 0xFF	; 255
     a44:	7f 4f       	sbci	r23, 0xFF	; 255
     a46:	ce 01       	movw	r24, r28
     a48:	42 96       	adiw	r24, 0x12	; 18
     a4a:	de de       	rcall	.-580    	; 0x808 <String::operator=(char const*) [clone .part.3]>
_ZN6String4initEv():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     a4c:	1a 82       	std	Y+2, r1	; 0x02
     a4e:	19 82       	std	Y+1, r1	; 0x01
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:134
  capacity = 0;
     a50:	1c 82       	std	Y+4, r1	; 0x04
     a52:	1b 82       	std	Y+3, r1	; 0x03
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:135
  len = 0;
     a54:	1e 82       	std	Y+6, r1	; 0x06
     a56:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:37
}

String::String(const String &value)
{
  init();
  *this = value;
     a58:	be 01       	movw	r22, r28
     a5a:	68 5e       	subi	r22, 0xE8	; 232
     a5c:	7f 4f       	sbci	r23, 0xFF	; 255
     a5e:	ce 01       	movw	r24, r28
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	db de       	rcall	.-586    	; 0x81a <String::operator=(String const&)>
operator+():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     a64:	aa 88       	ldd	r10, Y+18	; 0x12
     a66:	bb 88       	ldd	r11, Y+19	; 0x13
concat():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
     a68:	a1 14       	cp	r10, r1
     a6a:	b1 04       	cpc	r11, r1
     a6c:	79 f1       	breq	.+94     	; 0xacc <hashme()+0x1e0>
operator+():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     a6e:	0e 89       	ldd	r16, Y+22	; 0x16
     a70:	1f 89       	ldd	r17, Y+23	; 0x17
concat():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
     a72:	01 15       	cp	r16, r1
     a74:	11 05       	cpc	r17, r1
     a76:	a1 f0       	breq	.+40     	; 0xaa0 <hashme()+0x1b4>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
     a78:	8d 81       	ldd	r24, Y+5	; 0x05
     a7a:	9e 81       	ldd	r25, Y+6	; 0x06
     a7c:	08 0f       	add	r16, r24
     a7e:	19 1f       	adc	r17, r25
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
     a80:	b8 01       	movw	r22, r16
     a82:	ce 01       	movw	r24, r28
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	3c de       	rcall	.-904    	; 0x700 <String::reserve(unsigned int)>
     a88:	88 23       	and	r24, r24
     a8a:	01 f1       	breq	.+64     	; 0xacc <hashme()+0x1e0>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:269
  strcpy(buffer + len, cstr);
     a8c:	29 81       	ldd	r18, Y+1	; 0x01
     a8e:	3a 81       	ldd	r19, Y+2	; 0x02
     a90:	8d 81       	ldd	r24, Y+5	; 0x05
     a92:	9e 81       	ldd	r25, Y+6	; 0x06
     a94:	b5 01       	movw	r22, r10
     a96:	82 0f       	add	r24, r18
     a98:	93 1f       	adc	r25, r19
     a9a:	f7 d8       	rcall	.-3602   	; 0xfffffc8a <__eeprom_end+0xff7efc8a>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:270
  len = newlen;
     a9c:	1e 83       	std	Y+6, r17	; 0x06
     a9e:	0d 83       	std	Y+5, r16	; 0x05
hashme():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:49
     aa0:	10 e0       	ldi	r17, 0x00	; 0
     aa2:	00 e0       	ldi	r16, 0x00	; 0
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	9a 81       	ldd	r25, Y+2	; 0x02
print():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:45

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
     aa8:	2d 81       	ldd	r18, Y+5	; 0x05
     aaa:	3e 81       	ldd	r19, Y+6	; 0x06
     aac:	02 17       	cp	r16, r18
     aae:	13 07       	cpc	r17, r19
     ab0:	88 f4       	brcc	.+34     	; 0xad4 <hashme()+0x1e8>
hashme():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:533
  return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
  if (index >= len || !buffer) return 0;
     ab2:	60 e0       	ldi	r22, 0x00	; 0
operator[]():
     ab4:	00 97       	sbiw	r24, 0x00	; 0
     ab6:	21 f0       	breq	.+8      	; 0xac0 <hashme()+0x1d4>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:534
  return buffer[index];
     ab8:	80 0f       	add	r24, r16
     aba:	91 1f       	adc	r25, r17
     abc:	fc 01       	movw	r30, r24
     abe:	60 81       	ld	r22, Z
print():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:46
    n += write(s[i]);
     ac0:	8f e4       	ldi	r24, 0x4F	; 79
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	5c dd       	rcall	.-1352   	; 0x57e <Sha1Wrapper::write(unsigned char)>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:45
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
     ac6:	0f 5f       	subi	r16, 0xFF	; 255
     ac8:	1f 4f       	sbci	r17, 0xFF	; 255
     aca:	ec cf       	rjmp	.-40     	; 0xaa4 <hashme()+0x1b8>
operator+():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	6c de       	rcall	.-808    	; 0x7aa <String::invalidate()>
     ad2:	e6 cf       	rjmp	.-52     	; 0xaa0 <hashme()+0x1b4>
__base_dtor ():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
     ad4:	7d d7       	rcall	.+3834   	; 0x19d0 <free>
     ad6:	8a 89       	ldd	r24, Y+18	; 0x12
     ad8:	9b 89       	ldd	r25, Y+19	; 0x13
     ada:	7a d7       	rcall	.+3828   	; 0x19d0 <free>
sha1_hasher_pad():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:136



void sha1_hasher_pad(sha1_hasher_t hasher)
{
	hasher->_lock = 1;
     adc:	f1 e0       	ldi	r31, 0x01	; 1
     ade:	f0 93 b0 01 	sts	0x01B0, r31	; 0x8001b0 <Sha1+0x61>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:137
	sha1_hasher_add_byte(hasher, 0x80);
     ae2:	60 e8       	ldi	r22, 0x80	; 128
     ae4:	83 e5       	ldi	r24, 0x53	; 83
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	3d db       	rcall	.-2438   	; 0x164 <sha1_hasher_add_byte(sha1_hasher_s*, unsigned char)>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:138
	while(hasher->block_offset != 56)
     aea:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Sha1+0x58>
     aee:	88 33       	cpi	r24, 0x38	; 56
     af0:	11 f0       	breq	.+4      	; 0xaf6 <hashme()+0x20a>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:140
	{
		sha1_hasher_add_byte(hasher, 0);
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	f7 cf       	rjmp	.-18     	; 0xae4 <hashme()+0x1f8>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:145
	}

	// FIXME:
	// Use a loop for this.
	sha1_hasher_add_byte(hasher, hasher->total_bytes * 8 >> 56);
     af6:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <Sha1+0x59>
     afa:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <Sha1+0x5a>
     afe:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <Sha1+0x5b>
     b02:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <Sha1+0x5c>
     b06:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <Sha1+0x5d>
     b0a:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <Sha1+0x5e>
     b0e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <Sha1+0x5f>
     b12:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <Sha1+0x60>
     b16:	03 e0       	ldi	r16, 0x03	; 3
     b18:	63 d6       	rcall	.+3270   	; 0x17e0 <__ashldi3>
     b1a:	08 e3       	ldi	r16, 0x38	; 56
     b1c:	7c d6       	rcall	.+3320   	; 0x1816 <__lshrdi3>
     b1e:	62 2f       	mov	r22, r18
     b20:	83 e5       	ldi	r24, 0x53	; 83
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	1f db       	rcall	.-2498   	; 0x164 <sha1_hasher_add_byte(sha1_hasher_s*, unsigned char)>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:146
	sha1_hasher_add_byte(hasher, hasher->total_bytes * 8 >> 48);
     b26:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <Sha1+0x59>
     b2a:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <Sha1+0x5a>
     b2e:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <Sha1+0x5b>
     b32:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <Sha1+0x5c>
     b36:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <Sha1+0x5d>
     b3a:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <Sha1+0x5e>
     b3e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <Sha1+0x5f>
     b42:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <Sha1+0x60>
     b46:	03 e0       	ldi	r16, 0x03	; 3
     b48:	4b d6       	rcall	.+3222   	; 0x17e0 <__ashldi3>
     b4a:	00 e3       	ldi	r16, 0x30	; 48
     b4c:	64 d6       	rcall	.+3272   	; 0x1816 <__lshrdi3>
     b4e:	62 2f       	mov	r22, r18
     b50:	83 e5       	ldi	r24, 0x53	; 83
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	07 db       	rcall	.-2546   	; 0x164 <sha1_hasher_add_byte(sha1_hasher_s*, unsigned char)>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:147
	sha1_hasher_add_byte(hasher, hasher->total_bytes * 8 >> 40);
     b56:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <Sha1+0x59>
     b5a:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <Sha1+0x5a>
     b5e:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <Sha1+0x5b>
     b62:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <Sha1+0x5c>
     b66:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <Sha1+0x5d>
     b6a:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <Sha1+0x5e>
     b6e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <Sha1+0x5f>
     b72:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <Sha1+0x60>
     b76:	03 e0       	ldi	r16, 0x03	; 3
     b78:	33 d6       	rcall	.+3174   	; 0x17e0 <__ashldi3>
     b7a:	08 e2       	ldi	r16, 0x28	; 40
     b7c:	4c d6       	rcall	.+3224   	; 0x1816 <__lshrdi3>
     b7e:	62 2f       	mov	r22, r18
     b80:	83 e5       	ldi	r24, 0x53	; 83
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	ef da       	rcall	.-2594   	; 0x164 <sha1_hasher_add_byte(sha1_hasher_s*, unsigned char)>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:148
	sha1_hasher_add_byte(hasher, hasher->total_bytes * 8 >> 32);
     b86:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <Sha1+0x59>
     b8a:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <Sha1+0x5a>
     b8e:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <Sha1+0x5b>
     b92:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <Sha1+0x5c>
     b96:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <Sha1+0x5d>
     b9a:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <Sha1+0x5e>
     b9e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <Sha1+0x5f>
     ba2:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <Sha1+0x60>
     ba6:	03 e0       	ldi	r16, 0x03	; 3
     ba8:	1b d6       	rcall	.+3126   	; 0x17e0 <__ashldi3>
     baa:	00 e2       	ldi	r16, 0x20	; 32
     bac:	34 d6       	rcall	.+3176   	; 0x1816 <__lshrdi3>
     bae:	62 2f       	mov	r22, r18
     bb0:	83 e5       	ldi	r24, 0x53	; 83
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	d7 da       	rcall	.-2642   	; 0x164 <sha1_hasher_add_byte(sha1_hasher_s*, unsigned char)>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:149
	sha1_hasher_add_byte(hasher, hasher->total_bytes * 8 >> 24);
     bb6:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <Sha1+0x59>
     bba:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <Sha1+0x5a>
     bbe:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <Sha1+0x5b>
     bc2:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <Sha1+0x5c>
     bc6:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <Sha1+0x5d>
     bca:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <Sha1+0x5e>
     bce:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <Sha1+0x5f>
     bd2:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <Sha1+0x60>
     bd6:	03 e0       	ldi	r16, 0x03	; 3
     bd8:	03 d6       	rcall	.+3078   	; 0x17e0 <__ashldi3>
     bda:	08 e1       	ldi	r16, 0x18	; 24
     bdc:	1c d6       	rcall	.+3128   	; 0x1816 <__lshrdi3>
     bde:	62 2f       	mov	r22, r18
     be0:	83 e5       	ldi	r24, 0x53	; 83
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	bf da       	rcall	.-2690   	; 0x164 <sha1_hasher_add_byte(sha1_hasher_s*, unsigned char)>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:150
	sha1_hasher_add_byte(hasher, hasher->total_bytes * 8 >> 16);
     be6:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <Sha1+0x59>
     bea:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <Sha1+0x5a>
     bee:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <Sha1+0x5b>
     bf2:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <Sha1+0x5c>
     bf6:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <Sha1+0x5d>
     bfa:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <Sha1+0x5e>
     bfe:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <Sha1+0x5f>
     c02:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <Sha1+0x60>
     c06:	03 e0       	ldi	r16, 0x03	; 3
     c08:	eb d5       	rcall	.+3030   	; 0x17e0 <__ashldi3>
     c0a:	00 e1       	ldi	r16, 0x10	; 16
     c0c:	04 d6       	rcall	.+3080   	; 0x1816 <__lshrdi3>
     c0e:	62 2f       	mov	r22, r18
     c10:	83 e5       	ldi	r24, 0x53	; 83
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	a7 da       	rcall	.-2738   	; 0x164 <sha1_hasher_add_byte(sha1_hasher_s*, unsigned char)>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:151
	sha1_hasher_add_byte(hasher, hasher->total_bytes * 8 >> 8);
     c16:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <Sha1+0x59>
     c1a:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <Sha1+0x5a>
     c1e:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <Sha1+0x5b>
     c22:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <Sha1+0x5c>
     c26:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <Sha1+0x5d>
     c2a:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <Sha1+0x5e>
     c2e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <Sha1+0x5f>
     c32:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <Sha1+0x60>
     c36:	03 e0       	ldi	r16, 0x03	; 3
     c38:	d3 d5       	rcall	.+2982   	; 0x17e0 <__ashldi3>
     c3a:	08 e0       	ldi	r16, 0x08	; 8
     c3c:	ec d5       	rcall	.+3032   	; 0x1816 <__lshrdi3>
     c3e:	62 2f       	mov	r22, r18
     c40:	83 e5       	ldi	r24, 0x53	; 83
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	8f da       	rcall	.-2786   	; 0x164 <sha1_hasher_add_byte(sha1_hasher_s*, unsigned char)>
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:152
	sha1_hasher_add_byte(hasher, hasher->total_bytes * 8);
     c46:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <Sha1+0x59>
     c4a:	66 0f       	add	r22, r22
     c4c:	66 0f       	add	r22, r22
     c4e:	66 0f       	add	r22, r22
     c50:	83 e5       	ldi	r24, 0x53	; 83
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	87 da       	rcall	.-2802   	; 0x164 <sha1_hasher_add_byte(sha1_hasher_s*, unsigned char)>
     c56:	d6 01       	movw	r26, r12
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	6d 91       	ld	r22, X+
     c5c:	7d 91       	ld	r23, X+
     c5e:	8d 91       	ld	r24, X+
     c60:	9c 91       	ld	r25, X
     c62:	17 97       	sbiw	r26, 0x07	; 7
     c64:	b6 d5       	rcall	.+2924   	; 0x17d2 <__bswapsi2>
sha1_hasher_gethash():
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:170
		a = hasher->state.words[i];
		b = a << 24;
		b |= ( a << 8) & 0x00ff0000;
		b |= ( a >> 8) & 0x0000ff00;
		b |= a >> 24;
		hasher->state.words[i] = b;
     c66:	f6 01       	movw	r30, r12
     c68:	64 83       	std	Z+4, r22	; 0x04
     c6a:	75 83       	std	Z+5, r23	; 0x05
     c6c:	86 83       	std	Z+6, r24	; 0x06
     c6e:	97 83       	std	Z+7, r25	; 0x07
     c70:	f4 e0       	ldi	r31, 0x04	; 4
     c72:	cf 0e       	add	r12, r31
     c74:	d1 1c       	adc	r13, r1
C:\Users\hh\AppData\Local\Temp\arduino_build_751022\sketch\sha1/hash.c:162
{
	sha1_hasher_pad(hasher);
	uint8_t i;

	// switch byte order.
	for(i = 0; i < (SHA1_HASH_LEN / 4); i++)
     c76:	8c 14       	cp	r8, r12
     c78:	9d 04       	cpc	r9, r13
     c7a:	69 f7       	brne	.-38     	; 0xc56 <hashme()+0x36a>
ducos1a():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:58
  {
    Sha1.init();
    Sha1.print(lastblockhash + String(ducos1res));
    // Get SHA1 result
    uint8_t *hash_bytes = Sha1.result();
    if (memcmp(hash_bytes, job, SHA1_HASH_LEN * sizeof(char)) == 0)
     c7c:	44 e1       	ldi	r20, 0x14	; 20
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	66 e9       	ldi	r22, 0x96	; 150
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	83 e5       	ldi	r24, 0x53	; 83
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	ea d7       	rcall	.+4052   	; 0x1c5e <memcmp>
     c8a:	89 2b       	or	r24, r25
     c8c:	59 f0       	breq	.+22     	; 0xca4 <hashme()+0x3b8>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:49
  // Difficulty loop
#ifdef ARDUINO_ARCH_AVR
  // If the difficulty is too high for AVR architecture then return 0
  if (difficulty > 655)
    return 0;
  for (uint16_t ducos1res = 0; ducos1res < difficulty * 100 + 1; ducos1res++)
     c8e:	8f ef       	ldi	r24, 0xFF	; 255
     c90:	e8 1a       	sub	r14, r24
     c92:	f8 0a       	sbc	r15, r24
     c94:	a9 ee       	ldi	r26, 0xE9	; 233
     c96:	ea 16       	cp	r14, r26
     c98:	a3 e0       	ldi	r26, 0x03	; 3
     c9a:	fa 06       	cpc	r15, r26
     c9c:	09 f0       	breq	.+2      	; 0xca0 <hashme()+0x3b4>
     c9e:	9b ce       	rjmp	.-714    	; 0x9d6 <hashme()+0xea>
hashme():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:64
    {
      // If expected hash is equal to the found hash, return the result
      return ducos1res;
    }
  }
  return 0;
     ca0:	f1 2c       	mov	r15, r1
     ca2:	e1 2c       	mov	r14, r1
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:79

void hashme() {
  unsigned long startTime = millis();
  // Call DUCO-S1A hasher
  newblockhash.toUpperCase();
  ducos1result = ducos1a(lastblockhash, newblockhash, 10);
     ca4:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <ducos1result+0x1>
     ca8:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <ducos1result>
__base_dtor ():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:124
     cac:	88 8d       	ldd	r24, Y+24	; 0x18
     cae:	99 8d       	ldd	r25, Y+25	; 0x19
     cb0:	8f d6       	rcall	.+3358   	; 0x19d0 <free>
     cb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cb4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     cb6:	8c d6       	rcall	.+3352   	; 0x19d0 <free>
millis():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:341
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
     cb8:	2f b7       	in	r18, 0x3f	; 63
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:345

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
     cba:	f8 94       	cli
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:346
    m = millis_timer_millis;
     cbc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <millis_timer_millis>
     cc0:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <millis_timer_millis+0x1>
     cc4:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <millis_timer_millis+0x2>
     cc8:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <millis_timer_millis+0x3>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:347
    SREG = oldSREG;
     ccc:	2f bf       	out	0x3f, r18	; 63
hashme():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:81
  // Calculate elapsed time
  ducos1tim = uint16_t( millis() - startTime);
     cce:	84 19       	sub	r24, r4
     cd0:	95 09       	sbc	r25, r5
     cd2:	90 93 ff 00 	sts	0x00FF, r25	; 0x8000ff <ducos1tim+0x1>
     cd6:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <ducos1tim>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:82
  runS = 'C';
     cda:	83 e4       	ldi	r24, 0x43	; 67
     cdc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:83
}
     ce0:	a3 96       	adiw	r28, 0x23	; 35
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	df 90       	pop	r13
     cfa:	cf 90       	pop	r12
     cfc:	bf 90       	pop	r11
     cfe:	af 90       	pop	r10
     d00:	9f 90       	pop	r9
     d02:	8f 90       	pop	r8
     d04:	7f 90       	pop	r7
     d06:	6f 90       	pop	r6
     d08:	5f 90       	pop	r5
     d0a:	4f 90       	pop	r4
     d0c:	3f 90       	pop	r3
     d0e:	2f 90       	pop	r2
     d10:	08 95       	ret

00000d12 <__vector_5>:
__vector_5():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:308
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
     d12:	1f 92       	push	r1
     d14:	0f 92       	push	r0
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	2f 93       	push	r18
     d1e:	3f 93       	push	r19
     d20:	8f 93       	push	r24
     d22:	9f 93       	push	r25
     d24:	af 93       	push	r26
     d26:	bf 93       	push	r27
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:311
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
     d28:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <millis_timer_millis>
     d2c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <millis_timer_millis+0x1>
     d30:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <millis_timer_millis+0x2>
     d34:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <millis_timer_millis+0x3>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:312
    unsigned char f = millis_timer_fract;
     d38:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <millis_timer_fract>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:319
    static unsigned char correct_exact = 0;     // rollover intended
    if (++correct_exact < CORRECT_EXACT_MANY) {
      ++f;
    }
#endif
    f += FRACT_INC;
     d3c:	26 e0       	ldi	r18, 0x06	; 6
     d3e:	23 0f       	add	r18, r19
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:321

    if (f >= FRACT_MAX)
     d40:	2d 37       	cpi	r18, 0x7D	; 125
     d42:	68 f1       	brcs	.+90     	; 0xd9e <__vector_5+0x8c>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:323
    {
      f -= FRACT_MAX;
     d44:	29 e8       	ldi	r18, 0x89	; 137
     d46:	23 0f       	add	r18, r19
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:324
      m += MILLIS_INC + 1;
     d48:	03 96       	adiw	r24, 0x03	; 3
     d4a:	a1 1d       	adc	r26, r1
     d4c:	b1 1d       	adc	r27, r1
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:331
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
     d4e:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <millis_timer_fract>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:332
    millis_timer_millis = m;
     d52:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <millis_timer_millis>
     d56:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <millis_timer_millis+0x1>
     d5a:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <millis_timer_millis+0x2>
     d5e:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <millis_timer_millis+0x3>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:334
#ifndef CORRECT_EXACT_MICROS
    millis_timer_overflow_count++;
     d62:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <millis_timer_overflow_count>
     d66:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <millis_timer_overflow_count+0x1>
     d6a:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <millis_timer_overflow_count+0x2>
     d6e:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <millis_timer_overflow_count+0x3>
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	a1 1d       	adc	r26, r1
     d76:	b1 1d       	adc	r27, r1
     d78:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <millis_timer_overflow_count>
     d7c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <millis_timer_overflow_count+0x1>
     d80:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <millis_timer_overflow_count+0x2>
     d84:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <millis_timer_overflow_count+0x3>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:336
#endif
  }
     d88:	bf 91       	pop	r27
     d8a:	af 91       	pop	r26
     d8c:	9f 91       	pop	r25
     d8e:	8f 91       	pop	r24
     d90:	3f 91       	pop	r19
     d92:	2f 91       	pop	r18
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	0f 90       	pop	r0
     d9a:	1f 90       	pop	r1
     d9c:	18 95       	reti
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:328
      f -= FRACT_MAX;
      m += MILLIS_INC + 1;
    }
    else
    {
      m += MILLIS_INC;
     d9e:	02 96       	adiw	r24, 0x02	; 2
     da0:	a1 1d       	adc	r26, r1
     da2:	b1 1d       	adc	r27, r1
     da4:	d4 cf       	rjmp	.-88     	; 0xd4e <__vector_5+0x3c>

00000da6 <__vector_14>:
__vector_14():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:207
/*----------------------------------------------------------
 Handles all the communication. Is disabled only when waiting
 for new Start Condition.
----------------------------------------------------------*/
ISR(USI_OVERFLOW_VECTOR)
{
     da6:	1f 92       	push	r1
     da8:	0f 92       	push	r0
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	0f 92       	push	r0
     dae:	11 24       	eor	r1, r1
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	2f 93       	push	r18
     db6:	3f 93       	push	r19
     db8:	4f 93       	push	r20
     dba:	5f 93       	push	r21
     dbc:	6f 93       	push	r22
     dbe:	7f 93       	push	r23
     dc0:	8f 93       	push	r24
     dc2:	9f 93       	push	r25
     dc4:	af 93       	push	r26
     dc6:	bf 93       	push	r27
     dc8:	cf 93       	push	r28
     dca:	ef 93       	push	r30
     dcc:	ff 93       	push	r31
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:212
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
     dce:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USI_TWI_Overflow_State>
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <__vector_14+0x32>
     dd6:	76 c0       	rjmp	.+236    	; 0xec4 <__vector_14+0x11e>
     dd8:	c8 f4       	brcc	.+50     	; 0xe0c <__vector_14+0x66>
     dda:	88 23       	and	r24, r24
     ddc:	99 f1       	breq	.+102    	; 0xe44 <__vector_14+0x9e>
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	09 f4       	brne	.+2      	; 0xde4 <__vector_14+0x3e>
     de2:	56 c0       	rjmp	.+172    	; 0xe90 <__vector_14+0xea>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:306
    {
      SET_USI_TO_SEND_NACK();
    }
    break;
  }
}
     de4:	ff 91       	pop	r31
     de6:	ef 91       	pop	r30
     de8:	cf 91       	pop	r28
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:212
{
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
     e0c:	84 30       	cpi	r24, 0x04	; 4
     e0e:	09 f4       	brne	.+2      	; 0xe12 <__vector_14+0x6c>
     e10:	5f c0       	rjmp	.+190    	; 0xed0 <__vector_14+0x12a>
     e12:	b8 f1       	brcs	.+110    	; 0xe82 <__vector_14+0xdc>
     e14:	85 30       	cpi	r24, 0x05	; 5
     e16:	31 f7       	brne	.-52     	; 0xde4 <__vector_14+0x3e>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:293
    break;

  // Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
  case USI_SLAVE_GET_DATA_AND_SEND_ACK:
    // Put data into Buffer
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     e18:	84 e0       	ldi	r24, 0x04	; 4
     e1a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <USI_TWI_Overflow_State>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:294
    tmpUSIDR              = USIDR; // Not necessary, but prevents warnings
     e1e:	9f b1       	in	r25, 0x0f	; 15
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:295
    tmpRxHead = (TWI_RxHead + 1) & TWI_RX_BUFFER_MASK;
     e20:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <TWI_RxHead>
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	8f 70       	andi	r24, 0x0F	; 15
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:296
    if (TWI_RxTail != tmpRxHead) {
     e28:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <TWI_RxTail>
     e2c:	28 17       	cp	r18, r24
     e2e:	09 f4       	brne	.+2      	; 0xe32 <__vector_14+0x8c>
     e30:	70 c0       	rjmp	.+224    	; 0xf12 <__vector_14+0x16c>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:297
      TWI_RxHead            = tmpRxHead;
     e32:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <TWI_RxHead>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:298
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
     e36:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <TWI_RxHead>
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	ea 58       	subi	r30, 0x8A	; 138
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	90 83       	st	Z, r25
     e42:	19 c0       	rjmp	.+50     	; 0xe76 <__vector_14+0xd0>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:216

  switch (USI_TWI_Overflow_State) {
  // ---------- Address mode ----------
  // Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
  case USI_SLAVE_CHECK_ADDRESS:
    if ((USIDR == 0) || ((USIDR >> 1) == TWI_slaveAddress)) {
     e44:	8f b1       	in	r24, 0x0f	; 15
     e46:	88 23       	and	r24, r24
     e48:	31 f0       	breq	.+12     	; 0xe56 <__vector_14+0xb0>
     e4a:	8f b1       	in	r24, 0x0f	; 15
     e4c:	86 95       	lsr	r24
     e4e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <TWI_slaveAddress>
     e52:	89 13       	cpse	r24, r25
     e54:	19 c0       	rjmp	.+50     	; 0xe88 <__vector_14+0xe2>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:217
      if (USIDR & 0x01) {
     e56:	78 9b       	sbis	0x0f, 0	; 15
     e58:	12 c0       	rjmp	.+36     	; 0xe7e <__vector_14+0xd8>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:218
        if (USI_TWI_On_Slave_Transmit) {
     e5a:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <USI_TWI_On_Slave_Transmit>
     e5e:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <USI_TWI_On_Slave_Transmit+0x1>
     e62:	30 97       	sbiw	r30, 0x00	; 0
     e64:	29 f0       	breq	.+10     	; 0xe70 <__vector_14+0xca>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:220
          // reset tx buffer and call callback
          tmpTxTail = TWI_TxHead;
     e66:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <TWI_TxHead>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:221
          TWI_TxTail = tmpTxTail;
     e6a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <TWI_TxTail>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:222
          USI_TWI_On_Slave_Transmit();
     e6e:	09 95       	icall
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:224
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
     e70:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:226
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     e72:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <USI_TWI_Overflow_State>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:228
      }
      SET_USI_TO_SEND_ACK();
     e76:	1f b8       	out	0x0f, r1	; 15
     e78:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     e7a:	8e e7       	ldi	r24, 0x7E	; 126
     e7c:	21 c0       	rjmp	.+66     	; 0xec0 <__vector_14+0x11a>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:226
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     e7e:	84 e0       	ldi	r24, 0x04	; 4
     e80:	f8 cf       	rjmp	.-16     	; 0xe72 <__vector_14+0xcc>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:237
    break;

  // ----- Master write data mode ------
  // Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
  case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
    if (USIDR) // If NACK, the master does not want more data.
     e82:	8f b1       	in	r24, 0x0f	; 15
     e84:	88 23       	and	r24, r24
     e86:	21 f0       	breq	.+8      	; 0xe90 <__vector_14+0xea>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:255
    if (TWI_TxHead != tmpTxTail) {
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
      USIDR      = TWI_TxBuf[TWI_TxTail];
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
     e88:	b8 98       	cbi	0x17, 0	; 23
     e8a:	88 ea       	ldi	r24, 0xA8	; 168
     e8c:	8d b9       	out	0x0d, r24	; 13
     e8e:	17 c0       	rjmp	.+46     	; 0xebe <__vector_14+0x118>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:249
  // Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
  /* Falls through. */
  case USI_SLAVE_SEND_DATA:

    // Get data from Buffer
    tmpTxTail = TWI_TxTail; // Not necessary, but prevents warnings
     e90:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <TWI_TxTail>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:250
    if (TWI_TxHead != tmpTxTail) {
     e94:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <TWI_TxHead>
     e98:	98 17       	cp	r25, r24
     e9a:	b1 f3       	breq	.-20     	; 0xe88 <__vector_14+0xe2>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:251
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
     e9c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <TWI_TxTail>
     ea0:	8f 5f       	subi	r24, 0xFF	; 255
     ea2:	8f 70       	andi	r24, 0x0F	; 15
     ea4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <TWI_TxTail>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:252
      USIDR      = TWI_TxBuf[TWI_TxTail];
     ea8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <TWI_TxTail>
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	ea 57       	subi	r30, 0x7A	; 122
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	80 81       	ld	r24, Z
     eb4:	8f b9       	out	0x0f, r24	; 15
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:258
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
      return;
    }
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <USI_TWI_Overflow_State>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:259
    SET_USI_TO_SEND_DATA();
     ebc:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:255
    if (TWI_TxHead != tmpTxTail) {
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
      USIDR      = TWI_TxBuf[TWI_TxTail];
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
     ebe:	80 e7       	ldi	r24, 0x70	; 112
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     ec0:	8e b9       	out	0x0e, r24	; 14
     ec2:	90 cf       	rjmp	.-224    	; 0xde4 <__vector_14+0x3e>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:264
    SET_USI_TO_SEND_DATA();
    break;

  // Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
  case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
     ec4:	83 e0       	ldi	r24, 0x03	; 3
     ec6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <USI_TWI_Overflow_State>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:265
    SET_USI_TO_READ_ACK();
     eca:	b8 98       	cbi	0x17, 0	; 23
     ecc:	1f b8       	out	0x0f, r1	; 15
     ece:	d5 cf       	rjmp	.-86     	; 0xe7a <__vector_14+0xd4>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:271
    break;

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
     ed0:	85 e0       	ldi	r24, 0x05	; 5
     ed2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <USI_TWI_Overflow_State>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:272
    SET_USI_TO_READ_DATA();
     ed6:	b8 98       	cbi	0x17, 0	; 23
     ed8:	80 e7       	ldi	r24, 0x70	; 112
     eda:	8e b9       	out	0x0e, r24	; 14
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:274
    // call slave receive callback on stop condition
    if (USI_TWI_On_Slave_Receive) {
     edc:	00 91 14 01 	lds	r16, 0x0114	; 0x800114 <USI_TWI_On_Slave_Receive>
     ee0:	10 91 15 01 	lds	r17, 0x0115	; 0x800115 <USI_TWI_On_Slave_Receive+0x1>
     ee4:	01 15       	cp	r16, r1
     ee6:	11 05       	cpc	r17, r1
     ee8:	09 f4       	brne	.+2      	; 0xeec <__vector_14+0x146>
     eea:	7c cf       	rjmp	.-264    	; 0xde4 <__vector_14+0x3e>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:275
      tmpRxHead = TWI_RxHead;
     eec:	c0 91 4b 01 	lds	r28, 0x014B	; 0x80014b <TWI_RxHead>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:276
      if (TWI_RxTail != tmpRxHead) { // data in receive buffer
     ef0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <TWI_RxTail>
     ef4:	8c 17       	cp	r24, r28
     ef6:	09 f4       	brne	.+2      	; 0xefa <__vector_14+0x154>
     ef8:	75 cf       	rjmp	.-278    	; 0xde4 <__vector_14+0x3e>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:278
        // check for stop Condition
        while ((USISR & ((1 << USI_START_COND_INT) | (1 << USIPF) | (0xE << USICNT0))) == 0)
     efa:	8e b1       	in	r24, 0x0e	; 14
     efc:	8e 7a       	andi	r24, 0xAE	; 174
     efe:	e9 f3       	breq	.-6      	; 0xefa <__vector_14+0x154>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:281
          ;// wait for either Start or Stop Condition
          // cancel after one SCL cycle
        if (USISR & (1 << USIPF)) { // Stop Condition
     f00:	75 9b       	sbis	0x0e, 5	; 14
     f02:	70 cf       	rjmp	.-288    	; 0xde4 <__vector_14+0x3e>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:282
          USI_TWI_On_Slave_Receive(USI_TWI_Data_In_Receive_Buffer());
     f04:	ee d8       	rcall	.-3620   	; 0xe2 <USI_TWI_Data_In_Receive_Buffer>
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	f8 01       	movw	r30, r16
     f0a:	09 95       	icall
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:284
          // reset rx buffer
          TWI_RxTail = tmpRxHead;
     f0c:	c0 93 4c 01 	sts	0x014C, r28	; 0x80014c <TWI_RxTail>
     f10:	69 cf       	rjmp	.-302    	; 0xde4 <__vector_14+0x3e>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     f12:	b8 98       	cbi	0x17, 0	; 23
     f14:	b2 cf       	rjmp	.-156    	; 0xe7a <__vector_14+0xd4>

00000f16 <__vector_13>:
__vector_13():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:165
ISR(USI_START_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_START_VECTOR
__interrupt void USI_Start_Condition_ISR(void)
#endif
{
     f16:	1f 92       	push	r1
     f18:	0f 92       	push	r0
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	0f 92       	push	r0
     f1e:	11 24       	eor	r1, r1
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	2f 93       	push	r18
     f26:	3f 93       	push	r19
     f28:	4f 93       	push	r20
     f2a:	5f 93       	push	r21
     f2c:	6f 93       	push	r22
     f2e:	7f 93       	push	r23
     f30:	8f 93       	push	r24
     f32:	9f 93       	push	r25
     f34:	af 93       	push	r26
     f36:	bf 93       	push	r27
     f38:	cf 93       	push	r28
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:169
  unsigned char tmpPin; // Temporary variable for pin state
  unsigned char tmpRxHead; // Temporary variable to store volatile
  // call slave receive callback on repeated start
  if (USI_TWI_On_Slave_Receive) {
     f3e:	00 91 14 01 	lds	r16, 0x0114	; 0x800114 <USI_TWI_On_Slave_Receive>
     f42:	10 91 15 01 	lds	r17, 0x0115	; 0x800115 <USI_TWI_On_Slave_Receive+0x1>
     f46:	01 15       	cp	r16, r1
     f48:	11 05       	cpc	r17, r1
     f4a:	61 f0       	breq	.+24     	; 0xf64 <__vector_13+0x4e>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:170
    tmpRxHead = TWI_RxHead;
     f4c:	c0 91 4b 01 	lds	r28, 0x014B	; 0x80014b <TWI_RxHead>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:171
    if (TWI_RxTail != tmpRxHead) { // data in receive buffer
     f50:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <TWI_RxTail>
     f54:	8c 17       	cp	r24, r28
     f56:	31 f0       	breq	.+12     	; 0xf64 <__vector_13+0x4e>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:172
      USI_TWI_On_Slave_Receive(USI_TWI_Data_In_Receive_Buffer());
     f58:	c4 d8       	rcall	.-3704   	; 0xe2 <USI_TWI_Data_In_Receive_Buffer>
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	f8 01       	movw	r30, r16
     f5e:	09 95       	icall
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:174
      // reset rx buffer
      TWI_RxTail = tmpRxHead;
     f60:	c0 93 4c 01 	sts	0x014C, r28	; 0x80014c <TWI_RxTail>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:178
    }
  }

  USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
     f64:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <USI_TWI_Overflow_State>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:179
  DDR_USI &= ~(1 << PORT_USI_SDA); // Set SDA as input
     f68:	b8 98       	cbi	0x17, 0	; 23
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:180
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
     f6a:	b2 9b       	sbis	0x16, 2	; 22
     f6c:	1a c0       	rjmp	.+52     	; 0xfa2 <__vector_13+0x8c>
     f6e:	b0 9b       	sbis	0x16, 0	; 22
     f70:	fc cf       	rjmp	.-8      	; 0xf6a <__vector_13+0x54>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:185
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     f72:	88 ea       	ldi	r24, 0xA8	; 168
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:192
                                            // to first Start Condition (potential failure)
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  } else {
    // really Start Condition (Enable Overflow Interrupt)
    USICR = (1 << USISIE) | (1 << USIOIE)
     f74:	8d b9       	out	0x0d, r24	; 13
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:198
            | // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
            (1 << USIWM1) | (1 << USIWM0) |                 // Set USI in Two-wire mode.
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  }
  USISR = (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags
     f76:	80 ef       	ldi	r24, 0xF0	; 240
     f78:	8e b9       	out	0x0e, r24	; 14
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:200
          (0x0 << USICNT0); // Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
     f7a:	ff 91       	pop	r31
     f7c:	ef 91       	pop	r30
     f7e:	cf 91       	pop	r28
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	0f 90       	pop	r0
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	0f 90       	pop	r0
     f9e:	1f 90       	pop	r1
     fa0:	18 95       	reti
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:192
                                            // to first Start Condition (potential failure)
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  } else {
    // really Start Condition (Enable Overflow Interrupt)
    USICR = (1 << USISIE) | (1 << USIOIE)
     fa2:	88 ef       	ldi	r24, 0xF8	; 248
     fa4:	e7 cf       	rjmp	.-50     	; 0xf74 <__vector_13+0x5e>

00000fa6 <global constructors keyed to 65535_0_backend.cpp.o.2107>:
_GLOBAL__I_65535_0_backend.cpp.o.2107():
     fa6:	ef e4       	ldi	r30, 0x4F	; 79
     fa8:	f1 e0       	ldi	r31, 0x01	; 1
     faa:	13 82       	std	Z+3, r1	; 0x03
     fac:	12 82       	std	Z+2, r1	; 0x02
     fae:	8d e6       	ldi	r24, 0x6D	; 109
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	91 83       	std	Z+1, r25	; 0x01
     fb4:	80 83       	st	Z, r24
     fb6:	eb e0       	ldi	r30, 0x0B	; 11
     fb8:	f2 e0       	ldi	r31, 0x02	; 2
     fba:	11 82       	std	Z+1, r1	; 0x01
     fbc:	10 82       	st	Z, r1
     fbe:	13 82       	std	Z+3, r1	; 0x03
     fc0:	12 82       	std	Z+2, r1	; 0x02
     fc2:	15 82       	std	Z+5, r1	; 0x05
     fc4:	14 82       	std	Z+4, r1	; 0x04
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	64 e7       	ldi	r22, 0x74	; 116
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	cf 01       	movw	r24, r30
     fd0:	fd db       	rcall	.-2054   	; 0x7cc <String::copy(char const*, unsigned int)>
     fd2:	e5 e0       	ldi	r30, 0x05	; 5
     fd4:	f2 e0       	ldi	r31, 0x02	; 2
     fd6:	11 82       	std	Z+1, r1	; 0x01
     fd8:	10 82       	st	Z, r1
     fda:	13 82       	std	Z+3, r1	; 0x03
     fdc:	12 82       	std	Z+2, r1	; 0x02
     fde:	15 82       	std	Z+5, r1	; 0x05
     fe0:	14 82       	std	Z+4, r1	; 0x04
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	64 e7       	ldi	r22, 0x74	; 116
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	cf 01       	movw	r24, r30
     fec:	ef cb       	rjmp	.-2082   	; 0x7cc <String::copy(char const*, unsigned int)>

00000fee <main>:
init():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1138
*/

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	8a bd       	out	0x2a, r24	; 42
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1141
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
     ff2:	83 bf       	out	0x33, r24	; 51
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1162
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
     ff4:	78 94       	sei
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1167

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
     ff6:	89 b7       	in	r24, 0x39	; 57
     ff8:	82 60       	ori	r24, 0x02	; 2
     ffa:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:958
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
     ffc:	80 e4       	ldi	r24, 0x40	; 64
     ffe:	8c bd       	out	0x2c, r24	; 44
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:959
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
    1000:	8f ef       	ldi	r24, 0xFF	; 255
    1002:	8d bd       	out	0x2d, r24	; 45
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:960
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
    1004:	87 ec       	ldi	r24, 0xC7	; 199
    1006:	80 bf       	out	0x30, r24	; 48
init():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1214
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      // ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
      // dude, this is being called on startup. We know that ADCSRA is 0! Why add a RMW cycle?!
      ADCSRA = (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
    1008:	86 e8       	ldi	r24, 0x86	; 134
    100a:	86 b9       	out	0x06, r24	; 6
main():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/main.cpp:7

int main(void)
{
  init();

  setup();
    100c:	30 db       	rcall	.-2464   	; 0x66e <setup>
loop():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:219
}

void loop() {
  char ch;
  if (slCmd != ' ') { // my masters voice
    runR = '?'; // to store result
    100e:	1f e3       	ldi	r17, 0x3F	; 63
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:220
    recvP = 1;
    1010:	01 e0       	ldi	r16, 0x01	; 1
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:227
    while (0 < Wire.available())   { //fetch
      ch = Wire.read();
      recvBuf[recvP++] = ch;
    }
    doCmd(slCmd);
    slCmd = ' ';
    1012:	c0 e2       	ldi	r28, 0x20	; 32
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:229
    if (runS != 'C') {
      runS = 'I';
    1014:	d9 e4       	ldi	r29, 0x49	; 73
doCmd():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:165

void doCmd( char ch) {
  switch (ch) {
    case 'A':   //
      runS = 'I';
      runR  = VERSION;
    1016:	81 e6       	ldi	r24, 0x61	; 97
    1018:	f8 2e       	mov	r15, r24
loop():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:218
  Wire.onRequest(requestEvent);
}

void loop() {
  char ch;
  if (slCmd != ' ') { // my masters voice
    101a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <slCmd>
    101e:	80 32       	cpi	r24, 0x20	; 32
    1020:	c1 f1       	breq	.+112    	; 0x1092 <main+0xa4>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:219
    runR = '?'; // to store result
    1022:	10 93 61 00 	sts	0x0061, r17	; 0x800061 <runR>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:220
    recvP = 1;
    1026:	00 93 4a 01 	sts	0x014A, r16	; 0x80014a <recvP>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:221
    recvBuf[0] = slCmd;
    102a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <slCmd>
    102e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <recvBuf>
available():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:551

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
    1032:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <TwoWire::BufferLength>
    1036:	88 23       	and	r24, r24
    1038:	99 f0       	breq	.+38     	; 0x1060 <main+0x72>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:552
    return BufferLength - BufferIndex;
    103a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <TwoWire::BufferIndex>
    103e:	89 1b       	sub	r24, r25
    1040:	99 0b       	sbc	r25, r25
loop():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:222
    while (0 < Wire.available())   { //fetch
    1042:	18 16       	cp	r1, r24
    1044:	19 06       	cpc	r1, r25
    1046:	7c f4       	brge	.+30     	; 0x1066 <main+0x78>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:223
      ch = Wire.read();
    1048:	53 d8       	rcall	.-3930   	; 0xf0 <TwoWire::read() [clone .constprop.5]>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:224
      recvBuf[recvP++] = ch;
    104a:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <recvP>
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	9e 0f       	add	r25, r30
    1052:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <recvP>
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	e6 5d       	subi	r30, 0xD6	; 214
    105a:	fe 4f       	sbci	r31, 0xFE	; 254
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:223
  if (slCmd != ' ') { // my masters voice
    runR = '?'; // to store result
    recvP = 1;
    recvBuf[0] = slCmd;
    while (0 < Wire.available())   { //fetch
      ch = Wire.read();
    105c:	80 83       	st	Z, r24
    105e:	e9 cf       	rjmp	.-46     	; 0x1032 <main+0x44>
available():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\Wire\src/Wire.cpp:554
  } else {
    return USI_TWI_Data_In_Receive_Buffer();
    1060:	40 d8       	rcall	.-3968   	; 0xe2 <USI_TWI_Data_In_Receive_Buffer>
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	ee cf       	rjmp	.-36     	; 0x1042 <main+0x54>
loop():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:226
      recvBuf[recvP++] = ch;
    }
    doCmd(slCmd);
    1066:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <slCmd>
doCmd():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:162
  }
  ledOn(1);
}

void doCmd( char ch) {
  switch (ch) {
    106a:	8e 34       	cpi	r24, 0x4E	; 78
    106c:	09 f4       	brne	.+2      	; 0x1070 <main+0x82>
    106e:	90 c0       	rjmp	.+288    	; 0x1190 <main+0x1a2>
    1070:	0c f0       	brlt	.+2      	; 0x1074 <main+0x86>
    1072:	4e c0       	rjmp	.+156    	; 0x1110 <main+0x122>
    1074:	88 34       	cpi	r24, 0x48	; 72
    1076:	09 f4       	brne	.+2      	; 0x107a <main+0x8c>
    1078:	a1 c0       	rjmp	.+322    	; 0x11bc <main+0x1ce>
    107a:	b4 f5       	brge	.+108    	; 0x10e8 <main+0xfa>
    107c:	81 34       	cpi	r24, 0x41	; 65
    107e:	09 f4       	brne	.+2      	; 0x1082 <main+0x94>
    1080:	67 c0       	rjmp	.+206    	; 0x1150 <main+0x162>
loop():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:227
    while (0 < Wire.available())   { //fetch
      ch = Wire.read();
      recvBuf[recvP++] = ch;
    }
    doCmd(slCmd);
    slCmd = ' ';
    1082:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <slCmd>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:228
    if (runS != 'C') {
    1086:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    108a:	83 34       	cpi	r24, 0x43	; 67
    108c:	11 f0       	breq	.+4      	; 0x1092 <main+0xa4>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:229
      runS = 'I';
    108e:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <__DATA_REGION_ORIGIN__>
millis():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:341
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
    1092:	2f b7       	in	r18, 0x3f	; 63
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:345

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
    1094:	f8 94       	cli
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:346
    m = millis_timer_millis;
    1096:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <millis_timer_millis>
    109a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <millis_timer_millis+0x1>
    109e:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <millis_timer_millis+0x2>
    10a2:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <millis_timer_millis+0x3>
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:347
    SREG = oldSREG;
    10a6:	2f bf       	out	0x3f, r18	; 63
loop():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:234
    }
  }  // slcommand

  currTim = millis();
  if (nexTim < currTim) {
    10a8:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <nexTim>
    10ac:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <nexTim+0x1>
    10b0:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <nexTim+0x2>
    10b4:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <nexTim+0x3>
    10b8:	48 17       	cp	r20, r24
    10ba:	59 07       	cpc	r21, r25
    10bc:	6a 07       	cpc	r22, r26
    10be:	7b 07       	cpc	r23, r27
    10c0:	08 f0       	brcs	.+2      	; 0x10c4 <main+0xd6>
    10c2:	ab cf       	rjmp	.-170    	; 0x101a <main+0x2c>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:235
    nexTim = currTim + tick;
    10c4:	8c 50       	subi	r24, 0x0C	; 12
    10c6:	9e 4f       	sbci	r25, 0xFE	; 254
    10c8:	af 4f       	sbci	r26, 0xFF	; 255
    10ca:	bf 4f       	sbci	r27, 0xFF	; 255
    10cc:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <nexTim>
    10d0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <nexTim+0x1>
    10d4:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <nexTim+0x2>
    10d8:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <nexTim+0x3>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:236
    if (ledCnt == 0) {
    10dc:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ledCnt>
    10e0:	81 11       	cpse	r24, r1
    10e2:	70 c0       	rjmp	.+224    	; 0x11c4 <main+0x1d6>
ledOff():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:91
  digitalWrite(ledPin, HIGH);
  ledCnt = n;
}

void ledOff() {
  digitalWrite(ledPin, LOW);
    10e4:	78 da       	rcall	.-2832   	; 0x5d6 <digitalWrite.constprop.7>
    10e6:	99 cf       	rjmp	.-206    	; 0x101a <main+0x2c>
doCmd():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:162
  }
  ledOn(1);
}

void doCmd( char ch) {
  switch (ch) {
    10e8:	8c 34       	cpi	r24, 0x4C	; 76
    10ea:	e1 f1       	breq	.+120    	; 0x1164 <main+0x176>
main():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:181
      for (byte k = 1; k < recvP; k++) {
        lastblockhash += recvBuf[k];
      }
      break;
    case 'M':   //
      for (byte k = 1; k < recvP; k++) {
    10ec:	ee 24       	eor	r14, r14
    10ee:	e3 94       	inc	r14
doCmd():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:162
  }
  ledOn(1);
}

void doCmd( char ch) {
  switch (ch) {
    10f0:	8d 34       	cpi	r24, 0x4D	; 77
    10f2:	39 f6       	brne	.-114    	; 0x1082 <main+0x94>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:181
      for (byte k = 1; k < recvP; k++) {
        lastblockhash += recvBuf[k];
      }
      break;
    case 'M':   //
      for (byte k = 1; k < recvP; k++) {
    10f4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <recvP>
    10f8:	e8 16       	cp	r14, r24
    10fa:	18 f6       	brcc	.-122    	; 0x1082 <main+0x94>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:182
        lastblockhash += recvBuf[k];
    10fc:	ee 2d       	mov	r30, r14
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	e6 5d       	subi	r30, 0xD6	; 214
    1102:	fe 4f       	sbci	r31, 0xFE	; 254
_ZN6StringpLEc():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.h:115

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
  String & operator += (char c)     {concat(c); return (*this);}
    1104:	60 81       	ld	r22, Z
    1106:	8b e0       	ldi	r24, 0x0B	; 11
    1108:	92 e0       	ldi	r25, 0x02	; 2
    110a:	21 db       	rcall	.-2494   	; 0x74e <String::concat(char)>
doCmd():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:181
      for (byte k = 1; k < recvP; k++) {
        lastblockhash += recvBuf[k];
      }
      break;
    case 'M':   //
      for (byte k = 1; k < recvP; k++) {
    110c:	e3 94       	inc	r14
    110e:	f2 cf       	rjmp	.-28     	; 0x10f4 <main+0x106>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:162
  }
  ledOn(1);
}

void doCmd( char ch) {
  switch (ch) {
    1110:	86 35       	cpi	r24, 0x56	; 86
    1112:	09 f4       	brne	.+2      	; 0x1116 <main+0x128>
    1114:	55 c0       	rjmp	.+170    	; 0x11c0 <main+0x1d2>
    1116:	a4 f4       	brge	.+40     	; 0x1140 <main+0x152>
main():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:192
      for (byte k = 1; k < recvP; k++) {
        newblockhash += recvBuf[k];
      }
      break;
    case 'O':   //
      for (byte k = 1; k < recvP; k++) {
    1118:	ee 24       	eor	r14, r14
    111a:	e3 94       	inc	r14
doCmd():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:162
  }
  ledOn(1);
}

void doCmd( char ch) {
  switch (ch) {
    111c:	8f 34       	cpi	r24, 0x4F	; 79
    111e:	09 f0       	breq	.+2      	; 0x1122 <main+0x134>
    1120:	b0 cf       	rjmp	.-160    	; 0x1082 <main+0x94>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:192
      for (byte k = 1; k < recvP; k++) {
        newblockhash += recvBuf[k];
      }
      break;
    case 'O':   //
      for (byte k = 1; k < recvP; k++) {
    1122:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <recvP>
    1126:	e8 16       	cp	r14, r24
    1128:	08 f0       	brcs	.+2      	; 0x112c <main+0x13e>
    112a:	48 c0       	rjmp	.+144    	; 0x11bc <main+0x1ce>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:193
        newblockhash += recvBuf[k];
    112c:	ee 2d       	mov	r30, r14
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	e6 5d       	subi	r30, 0xD6	; 214
    1132:	fe 4f       	sbci	r31, 0xFE	; 254
_ZN6StringpLEc():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.h:115
    1134:	60 81       	ld	r22, Z
    1136:	85 e0       	ldi	r24, 0x05	; 5
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	09 db       	rcall	.-2542   	; 0x74e <String::concat(char)>
doCmd():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:192
      for (byte k = 1; k < recvP; k++) {
        newblockhash += recvBuf[k];
      }
      break;
    case 'O':   //
      for (byte k = 1; k < recvP; k++) {
    113c:	e3 94       	inc	r14
    113e:	f1 cf       	rjmp	.-30     	; 0x1122 <main+0x134>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:162
  }
  ledOn(1);
}

void doCmd( char ch) {
  switch (ch) {
    1140:	81 36       	cpi	r24, 0x61	; 97
    1142:	69 f0       	breq	.+26     	; 0x115e <main+0x170>
    1144:	82 36       	cpi	r24, 0x62	; 98
    1146:	09 f0       	breq	.+2      	; 0x114a <main+0x15c>
    1148:	9c cf       	rjmp	.-200    	; 0x1082 <main+0x94>
ledOff():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:91
  digitalWrite(ledPin, HIGH);
  ledCnt = n;
}

void ledOff() {
  digitalWrite(ledPin, LOW);
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	44 da       	rcall	.-2936   	; 0x5d6 <digitalWrite.constprop.7>
    114e:	99 cf       	rjmp	.-206    	; 0x1082 <main+0x94>
doCmd():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:164
}

void doCmd( char ch) {
  switch (ch) {
    case 'A':   //
      runS = 'I';
    1150:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:165
      runR  = VERSION;
    1154:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <runR>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:166
      slCmd = ' ';
    1158:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <slCmd>
    115c:	92 cf       	rjmp	.-220    	; 0x1082 <main+0x94>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:169
      break;
    case 'a':   //
      ledOn(4);
    115e:	84 e0       	ldi	r24, 0x04	; 4
    1160:	45 da       	rcall	.-2934   	; 0x5ec <ledOn(unsigned char)>
    1162:	8f cf       	rjmp	.-226    	; 0x1082 <main+0x94>
operator=():
    1164:	64 e7       	ldi	r22, 0x74	; 116
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	8b e0       	ldi	r24, 0x0B	; 11
    116a:	92 e0       	ldi	r25, 0x02	; 2
    116c:	4d db       	rcall	.-2406   	; 0x808 <String::operator=(char const*) [clone .part.3]>
main():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:176
    case 'b':   //
      ledOff();
      break;
    case 'L':   //
      lastblockhash = "";
      for (byte k = 1; k < recvP; k++) {
    116e:	ee 24       	eor	r14, r14
    1170:	e3 94       	inc	r14
doCmd():
    1172:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <recvP>
    1176:	e8 16       	cp	r14, r24
    1178:	08 f0       	brcs	.+2      	; 0x117c <main+0x18e>
    117a:	83 cf       	rjmp	.-250    	; 0x1082 <main+0x94>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:177
        lastblockhash += recvBuf[k];
    117c:	ee 2d       	mov	r30, r14
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	e6 5d       	subi	r30, 0xD6	; 214
    1182:	fe 4f       	sbci	r31, 0xFE	; 254
_ZN6StringpLEc():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.h:115
    1184:	60 81       	ld	r22, Z
    1186:	8b e0       	ldi	r24, 0x0B	; 11
    1188:	92 e0       	ldi	r25, 0x02	; 2
    118a:	e1 da       	rcall	.-2622   	; 0x74e <String::concat(char)>
doCmd():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:176
    case 'b':   //
      ledOff();
      break;
    case 'L':   //
      lastblockhash = "";
      for (byte k = 1; k < recvP; k++) {
    118c:	e3 94       	inc	r14
    118e:	f1 cf       	rjmp	.-30     	; 0x1172 <main+0x184>
operator=():
    1190:	64 e7       	ldi	r22, 0x74	; 116
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	85 e0       	ldi	r24, 0x05	; 5
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	37 db       	rcall	.-2450   	; 0x808 <String::operator=(char const*) [clone .part.3]>
main():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:187
        lastblockhash += recvBuf[k];
      }
      break;
    case 'N':   //
      newblockhash = "";
      for (byte k = 1; k < recvP; k++) {
    119a:	ee 24       	eor	r14, r14
    119c:	e3 94       	inc	r14
doCmd():
    119e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <recvP>
    11a2:	e8 16       	cp	r14, r24
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <main+0x1ba>
    11a6:	6d cf       	rjmp	.-294    	; 0x1082 <main+0x94>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:188
        newblockhash += recvBuf[k];
    11a8:	ee 2d       	mov	r30, r14
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	e6 5d       	subi	r30, 0xD6	; 214
    11ae:	fe 4f       	sbci	r31, 0xFE	; 254
_ZN6StringpLEc():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.h:115
    11b0:	60 81       	ld	r22, Z
    11b2:	85 e0       	ldi	r24, 0x05	; 5
    11b4:	92 e0       	ldi	r25, 0x02	; 2
    11b6:	cb da       	rcall	.-2666   	; 0x74e <String::concat(char)>
doCmd():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:187
        lastblockhash += recvBuf[k];
      }
      break;
    case 'N':   //
      newblockhash = "";
      for (byte k = 1; k < recvP; k++) {
    11b8:	e3 94       	inc	r14
    11ba:	f1 cf       	rjmp	.-30     	; 0x119e <main+0x1b0>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:198
        newblockhash += recvBuf[k];
      }
      hashme();
      break;
    case 'H':   //
      hashme();
    11bc:	97 db       	rcall	.-2258   	; 0x8ec <hashme()>
    11be:	61 cf       	rjmp	.-318    	; 0x1082 <main+0x94>
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:202
      break;
    case 'V':   //
      setEprom();
      setup();
    11c0:	56 da       	rcall	.-2900   	; 0x66e <setup>
    11c2:	5f cf       	rjmp	.-322    	; 0x1082 <main+0x94>
loop():
C:\Users\hh\Documents\Arduino\yaum\duino85/duino85.ino:239
  if (nexTim < currTim) {
    nexTim = currTim + tick;
    if (ledCnt == 0) {
      ledOff();
    } else {
      ledCnt--;
    11c4:	81 50       	subi	r24, 0x01	; 1
    11c6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ledCnt>
    11ca:	27 cf       	rjmp	.-434    	; 0x101a <main+0x2c>

000011cc <_GLOBAL__sub_D_backP>:
__base_dtor ():
C:\Users\hh\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/WString.cpp:124
    11cc:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <newblockhash>
    11d0:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <newblockhash+0x1>
    11d4:	fd d3       	rcall	.+2042   	; 0x19d0 <free>
    11d6:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <lastblockhash>
    11da:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <lastblockhash+0x1>
    11de:	f8 c3       	rjmp	.+2032   	; 0x19d0 <free>

000011e0 <__utoa_ncheck>:
__utoa_ncheck():
    11e0:	bb 27       	eor	r27, r27

000011e2 <__utoa_common>:
    11e2:	fb 01       	movw	r30, r22
    11e4:	55 27       	eor	r21, r21
    11e6:	aa 27       	eor	r26, r26
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	aa 1f       	adc	r26, r26
    11ee:	a4 17       	cp	r26, r20
    11f0:	10 f0       	brcs	.+4      	; 0x11f6 <__utoa_common+0x14>
    11f2:	a4 1b       	sub	r26, r20
    11f4:	83 95       	inc	r24
    11f6:	50 51       	subi	r21, 0x10	; 16
    11f8:	b9 f7       	brne	.-18     	; 0x11e8 <__utoa_common+0x6>
    11fa:	a0 5d       	subi	r26, 0xD0	; 208
    11fc:	aa 33       	cpi	r26, 0x3A	; 58
    11fe:	08 f0       	brcs	.+2      	; 0x1202 <__utoa_common+0x20>
    1200:	a9 5d       	subi	r26, 0xD9	; 217
    1202:	a1 93       	st	Z+, r26
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	79 f7       	brne	.-34     	; 0x11e6 <__utoa_common+0x4>
    1208:	b1 11       	cpse	r27, r1
    120a:	b1 93       	st	Z+, r27
    120c:	11 92       	st	Z+, r1
    120e:	cb 01       	movw	r24, r22
    1210:	e1 c1       	rjmp	.+962    	; 0x15d4 <strrev>

00001212 <vfprintf>:
vfprintf():
    1212:	ab e0       	ldi	r26, 0x0B	; 11
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	ee e0       	ldi	r30, 0x0E	; 14
    1218:	f9 e0       	ldi	r31, 0x09	; 9
    121a:	85 c2       	rjmp	.+1290   	; 0x1726 <__prologue_saves__>
    121c:	7c 01       	movw	r14, r24
    121e:	3b 01       	movw	r6, r22
    1220:	8a 01       	movw	r16, r20
    1222:	fc 01       	movw	r30, r24
    1224:	17 82       	std	Z+7, r1	; 0x07
    1226:	16 82       	std	Z+6, r1	; 0x06
    1228:	83 81       	ldd	r24, Z+3	; 0x03
    122a:	81 ff       	sbrs	r24, 1
    122c:	ba c1       	rjmp	.+884    	; 0x15a2 <vfprintf+0x390>
    122e:	ce 01       	movw	r24, r28
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	5c 01       	movw	r10, r24
    1234:	f7 01       	movw	r30, r14
    1236:	93 81       	ldd	r25, Z+3	; 0x03
    1238:	f3 01       	movw	r30, r6
    123a:	93 fd       	sbrc	r25, 3
    123c:	85 91       	lpm	r24, Z+
    123e:	93 ff       	sbrs	r25, 3
    1240:	81 91       	ld	r24, Z+
    1242:	3f 01       	movw	r6, r30
    1244:	88 23       	and	r24, r24
    1246:	09 f4       	brne	.+2      	; 0x124a <vfprintf+0x38>
    1248:	49 c1       	rjmp	.+658    	; 0x14dc <vfprintf+0x2ca>
    124a:	85 32       	cpi	r24, 0x25	; 37
    124c:	39 f4       	brne	.+14     	; 0x125c <vfprintf+0x4a>
    124e:	93 fd       	sbrc	r25, 3
    1250:	85 91       	lpm	r24, Z+
    1252:	93 ff       	sbrs	r25, 3
    1254:	81 91       	ld	r24, Z+
    1256:	3f 01       	movw	r6, r30
    1258:	85 32       	cpi	r24, 0x25	; 37
    125a:	21 f4       	brne	.+8      	; 0x1264 <vfprintf+0x52>
    125c:	b7 01       	movw	r22, r14
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	c9 d1       	rcall	.+914    	; 0x15f4 <fputc>
    1262:	e8 cf       	rjmp	.-48     	; 0x1234 <vfprintf+0x22>
    1264:	91 2c       	mov	r9, r1
    1266:	21 2c       	mov	r2, r1
    1268:	31 2c       	mov	r3, r1
    126a:	ff e1       	ldi	r31, 0x1F	; 31
    126c:	f3 15       	cp	r31, r3
    126e:	38 f0       	brcs	.+14     	; 0x127e <vfprintf+0x6c>
    1270:	8b 32       	cpi	r24, 0x2B	; 43
    1272:	11 f1       	breq	.+68     	; 0x12b8 <vfprintf+0xa6>
    1274:	90 f4       	brcc	.+36     	; 0x129a <vfprintf+0x88>
    1276:	80 32       	cpi	r24, 0x20	; 32
    1278:	09 f1       	breq	.+66     	; 0x12bc <vfprintf+0xaa>
    127a:	83 32       	cpi	r24, 0x23	; 35
    127c:	29 f1       	breq	.+74     	; 0x12c8 <vfprintf+0xb6>
    127e:	37 fc       	sbrc	r3, 7
    1280:	3c c0       	rjmp	.+120    	; 0x12fa <vfprintf+0xe8>
    1282:	20 ed       	ldi	r18, 0xD0	; 208
    1284:	28 0f       	add	r18, r24
    1286:	2a 30       	cpi	r18, 0x0A	; 10
    1288:	50 f5       	brcc	.+84     	; 0x12de <vfprintf+0xcc>
    128a:	36 fe       	sbrs	r3, 6
    128c:	20 c0       	rjmp	.+64     	; 0x12ce <vfprintf+0xbc>
    128e:	89 2d       	mov	r24, r9
    1290:	6a e0       	ldi	r22, 0x0A	; 10
    1292:	40 d2       	rcall	.+1152   	; 0x1714 <__mulqi3>
    1294:	92 2e       	mov	r9, r18
    1296:	98 0e       	add	r9, r24
    1298:	06 c0       	rjmp	.+12     	; 0x12a6 <vfprintf+0x94>
    129a:	8d 32       	cpi	r24, 0x2D	; 45
    129c:	91 f0       	breq	.+36     	; 0x12c2 <vfprintf+0xb0>
    129e:	80 33       	cpi	r24, 0x30	; 48
    12a0:	71 f7       	brne	.-36     	; 0x127e <vfprintf+0x6c>
    12a2:	68 94       	set
    12a4:	30 f8       	bld	r3, 0
    12a6:	f3 01       	movw	r30, r6
    12a8:	93 fd       	sbrc	r25, 3
    12aa:	85 91       	lpm	r24, Z+
    12ac:	93 ff       	sbrs	r25, 3
    12ae:	81 91       	ld	r24, Z+
    12b0:	3f 01       	movw	r6, r30
    12b2:	81 11       	cpse	r24, r1
    12b4:	da cf       	rjmp	.-76     	; 0x126a <vfprintf+0x58>
    12b6:	21 c0       	rjmp	.+66     	; 0x12fa <vfprintf+0xe8>
    12b8:	68 94       	set
    12ba:	31 f8       	bld	r3, 1
    12bc:	68 94       	set
    12be:	32 f8       	bld	r3, 2
    12c0:	f2 cf       	rjmp	.-28     	; 0x12a6 <vfprintf+0x94>
    12c2:	68 94       	set
    12c4:	33 f8       	bld	r3, 3
    12c6:	ef cf       	rjmp	.-34     	; 0x12a6 <vfprintf+0x94>
    12c8:	68 94       	set
    12ca:	34 f8       	bld	r3, 4
    12cc:	ec cf       	rjmp	.-40     	; 0x12a6 <vfprintf+0x94>
    12ce:	82 2d       	mov	r24, r2
    12d0:	6a e0       	ldi	r22, 0x0A	; 10
    12d2:	20 d2       	rcall	.+1088   	; 0x1714 <__mulqi3>
    12d4:	22 2e       	mov	r2, r18
    12d6:	28 0e       	add	r2, r24
    12d8:	68 94       	set
    12da:	35 f8       	bld	r3, 5
    12dc:	e4 cf       	rjmp	.-56     	; 0x12a6 <vfprintf+0x94>
    12de:	8e 32       	cpi	r24, 0x2E	; 46
    12e0:	29 f4       	brne	.+10     	; 0x12ec <vfprintf+0xda>
    12e2:	36 fc       	sbrc	r3, 6
    12e4:	fb c0       	rjmp	.+502    	; 0x14dc <vfprintf+0x2ca>
    12e6:	68 94       	set
    12e8:	36 f8       	bld	r3, 6
    12ea:	dd cf       	rjmp	.-70     	; 0x12a6 <vfprintf+0x94>
    12ec:	8c 36       	cpi	r24, 0x6C	; 108
    12ee:	19 f4       	brne	.+6      	; 0x12f6 <vfprintf+0xe4>
    12f0:	68 94       	set
    12f2:	37 f8       	bld	r3, 7
    12f4:	d8 cf       	rjmp	.-80     	; 0x12a6 <vfprintf+0x94>
    12f6:	88 36       	cpi	r24, 0x68	; 104
    12f8:	b1 f2       	breq	.-84     	; 0x12a6 <vfprintf+0x94>
    12fa:	98 2f       	mov	r25, r24
    12fc:	9f 7d       	andi	r25, 0xDF	; 223
    12fe:	95 54       	subi	r25, 0x45	; 69
    1300:	93 30       	cpi	r25, 0x03	; 3
    1302:	d8 f0       	brcs	.+54     	; 0x133a <vfprintf+0x128>
    1304:	83 36       	cpi	r24, 0x63	; 99
    1306:	91 f1       	breq	.+100    	; 0x136c <vfprintf+0x15a>
    1308:	83 37       	cpi	r24, 0x73	; 115
    130a:	b1 f1       	breq	.+108    	; 0x1378 <vfprintf+0x166>
    130c:	83 35       	cpi	r24, 0x53	; 83
    130e:	09 f0       	breq	.+2      	; 0x1312 <vfprintf+0x100>
    1310:	5e c0       	rjmp	.+188    	; 0x13ce <vfprintf+0x1bc>
    1312:	28 01       	movw	r4, r16
    1314:	f2 e0       	ldi	r31, 0x02	; 2
    1316:	4f 0e       	add	r4, r31
    1318:	51 1c       	adc	r5, r1
    131a:	f8 01       	movw	r30, r16
    131c:	c0 80       	ld	r12, Z
    131e:	d1 80       	ldd	r13, Z+1	; 0x01
    1320:	69 2d       	mov	r22, r9
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	36 fc       	sbrc	r3, 6
    1326:	02 c0       	rjmp	.+4      	; 0x132c <vfprintf+0x11a>
    1328:	6f ef       	ldi	r22, 0xFF	; 255
    132a:	7f ef       	ldi	r23, 0xFF	; 255
    132c:	c6 01       	movw	r24, r12
    132e:	3c d1       	rcall	.+632    	; 0x15a8 <strnlen_P>
    1330:	4c 01       	movw	r8, r24
    1332:	68 94       	set
    1334:	37 f8       	bld	r3, 7
    1336:	82 01       	movw	r16, r4
    1338:	0a c0       	rjmp	.+20     	; 0x134e <vfprintf+0x13c>
    133a:	0c 5f       	subi	r16, 0xFC	; 252
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	2f e3       	ldi	r18, 0x3F	; 63
    1340:	29 83       	std	Y+1, r18	; 0x01
    1342:	88 24       	eor	r8, r8
    1344:	83 94       	inc	r8
    1346:	91 2c       	mov	r9, r1
    1348:	65 01       	movw	r12, r10
    134a:	e8 94       	clt
    134c:	37 f8       	bld	r3, 7
    134e:	33 fe       	sbrs	r3, 3
    1350:	2a c0       	rjmp	.+84     	; 0x13a6 <vfprintf+0x194>
    1352:	52 2c       	mov	r5, r2
    1354:	81 14       	cp	r8, r1
    1356:	91 04       	cpc	r9, r1
    1358:	59 f5       	brne	.+86     	; 0x13b0 <vfprintf+0x19e>
    135a:	55 20       	and	r5, r5
    135c:	09 f4       	brne	.+2      	; 0x1360 <vfprintf+0x14e>
    135e:	6a cf       	rjmp	.-300    	; 0x1234 <vfprintf+0x22>
    1360:	b7 01       	movw	r22, r14
    1362:	80 e2       	ldi	r24, 0x20	; 32
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	46 d1       	rcall	.+652    	; 0x15f4 <fputc>
    1368:	5a 94       	dec	r5
    136a:	f7 cf       	rjmp	.-18     	; 0x135a <vfprintf+0x148>
    136c:	f8 01       	movw	r30, r16
    136e:	80 81       	ld	r24, Z
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	0e 5f       	subi	r16, 0xFE	; 254
    1374:	1f 4f       	sbci	r17, 0xFF	; 255
    1376:	e5 cf       	rjmp	.-54     	; 0x1342 <vfprintf+0x130>
    1378:	28 01       	movw	r4, r16
    137a:	f2 e0       	ldi	r31, 0x02	; 2
    137c:	4f 0e       	add	r4, r31
    137e:	51 1c       	adc	r5, r1
    1380:	f8 01       	movw	r30, r16
    1382:	c0 80       	ld	r12, Z
    1384:	d1 80       	ldd	r13, Z+1	; 0x01
    1386:	69 2d       	mov	r22, r9
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	36 fc       	sbrc	r3, 6
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <vfprintf+0x180>
    138e:	6f ef       	ldi	r22, 0xFF	; 255
    1390:	7f ef       	ldi	r23, 0xFF	; 255
    1392:	c6 01       	movw	r24, r12
    1394:	14 d1       	rcall	.+552    	; 0x15be <strnlen>
    1396:	4c 01       	movw	r8, r24
    1398:	82 01       	movw	r16, r4
    139a:	d7 cf       	rjmp	.-82     	; 0x134a <vfprintf+0x138>
    139c:	b7 01       	movw	r22, r14
    139e:	80 e2       	ldi	r24, 0x20	; 32
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	28 d1       	rcall	.+592    	; 0x15f4 <fputc>
    13a4:	2a 94       	dec	r2
    13a6:	28 14       	cp	r2, r8
    13a8:	19 04       	cpc	r1, r9
    13aa:	09 f0       	breq	.+2      	; 0x13ae <vfprintf+0x19c>
    13ac:	b8 f7       	brcc	.-18     	; 0x139c <vfprintf+0x18a>
    13ae:	d1 cf       	rjmp	.-94     	; 0x1352 <vfprintf+0x140>
    13b0:	f6 01       	movw	r30, r12
    13b2:	37 fc       	sbrc	r3, 7
    13b4:	85 91       	lpm	r24, Z+
    13b6:	37 fe       	sbrs	r3, 7
    13b8:	81 91       	ld	r24, Z+
    13ba:	6f 01       	movw	r12, r30
    13bc:	b7 01       	movw	r22, r14
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	19 d1       	rcall	.+562    	; 0x15f4 <fputc>
    13c2:	51 10       	cpse	r5, r1
    13c4:	5a 94       	dec	r5
    13c6:	f1 e0       	ldi	r31, 0x01	; 1
    13c8:	8f 1a       	sub	r8, r31
    13ca:	91 08       	sbc	r9, r1
    13cc:	c3 cf       	rjmp	.-122    	; 0x1354 <vfprintf+0x142>
    13ce:	84 36       	cpi	r24, 0x64	; 100
    13d0:	19 f0       	breq	.+6      	; 0x13d8 <vfprintf+0x1c6>
    13d2:	89 36       	cpi	r24, 0x69	; 105
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <vfprintf+0x1c6>
    13d6:	73 c0       	rjmp	.+230    	; 0x14be <vfprintf+0x2ac>
    13d8:	f8 01       	movw	r30, r16
    13da:	37 fe       	sbrs	r3, 7
    13dc:	67 c0       	rjmp	.+206    	; 0x14ac <vfprintf+0x29a>
    13de:	60 81       	ld	r22, Z
    13e0:	71 81       	ldd	r23, Z+1	; 0x01
    13e2:	82 81       	ldd	r24, Z+2	; 0x02
    13e4:	93 81       	ldd	r25, Z+3	; 0x03
    13e6:	0c 5f       	subi	r16, 0xFC	; 252
    13e8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ea:	f3 2d       	mov	r31, r3
    13ec:	ff 76       	andi	r31, 0x6F	; 111
    13ee:	3f 2e       	mov	r3, r31
    13f0:	97 ff       	sbrs	r25, 7
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <vfprintf+0x1f4>
    13f4:	90 95       	com	r25
    13f6:	80 95       	com	r24
    13f8:	70 95       	com	r23
    13fa:	61 95       	neg	r22
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255
    13fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1400:	9f 4f       	sbci	r25, 0xFF	; 255
    1402:	68 94       	set
    1404:	37 f8       	bld	r3, 7
    1406:	2a e0       	ldi	r18, 0x0A	; 10
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	a5 01       	movw	r20, r10
    140c:	23 d1       	rcall	.+582    	; 0x1654 <__ultoa_invert>
    140e:	c8 2e       	mov	r12, r24
    1410:	ca 18       	sub	r12, r10
    1412:	dc 2c       	mov	r13, r12
    1414:	83 2c       	mov	r8, r3
    1416:	36 fe       	sbrs	r3, 6
    1418:	0c c0       	rjmp	.+24     	; 0x1432 <vfprintf+0x220>
    141a:	e8 94       	clt
    141c:	80 f8       	bld	r8, 0
    141e:	c9 14       	cp	r12, r9
    1420:	40 f4       	brcc	.+16     	; 0x1432 <vfprintf+0x220>
    1422:	34 fe       	sbrs	r3, 4
    1424:	05 c0       	rjmp	.+10     	; 0x1430 <vfprintf+0x21e>
    1426:	32 fc       	sbrc	r3, 2
    1428:	03 c0       	rjmp	.+6      	; 0x1430 <vfprintf+0x21e>
    142a:	f3 2d       	mov	r31, r3
    142c:	fe 7e       	andi	r31, 0xEE	; 238
    142e:	8f 2e       	mov	r8, r31
    1430:	d9 2c       	mov	r13, r9
    1432:	84 fe       	sbrs	r8, 4
    1434:	90 c0       	rjmp	.+288    	; 0x1556 <vfprintf+0x344>
    1436:	fe 01       	movw	r30, r28
    1438:	ec 0d       	add	r30, r12
    143a:	f1 1d       	adc	r31, r1
    143c:	80 81       	ld	r24, Z
    143e:	80 33       	cpi	r24, 0x30	; 48
    1440:	09 f0       	breq	.+2      	; 0x1444 <vfprintf+0x232>
    1442:	82 c0       	rjmp	.+260    	; 0x1548 <vfprintf+0x336>
    1444:	28 2d       	mov	r18, r8
    1446:	29 7e       	andi	r18, 0xE9	; 233
    1448:	82 2e       	mov	r8, r18
    144a:	88 2d       	mov	r24, r8
    144c:	88 70       	andi	r24, 0x08	; 8
    144e:	58 2e       	mov	r5, r24
    1450:	83 fc       	sbrc	r8, 3
    1452:	8f c0       	rjmp	.+286    	; 0x1572 <vfprintf+0x360>
    1454:	80 fe       	sbrs	r8, 0
    1456:	89 c0       	rjmp	.+274    	; 0x156a <vfprintf+0x358>
    1458:	9c 2c       	mov	r9, r12
    145a:	d2 14       	cp	r13, r2
    145c:	18 f4       	brcc	.+6      	; 0x1464 <vfprintf+0x252>
    145e:	2c 0c       	add	r2, r12
    1460:	92 2c       	mov	r9, r2
    1462:	9d 18       	sub	r9, r13
    1464:	84 fe       	sbrs	r8, 4
    1466:	8b c0       	rjmp	.+278    	; 0x157e <vfprintf+0x36c>
    1468:	b7 01       	movw	r22, r14
    146a:	80 e3       	ldi	r24, 0x30	; 48
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	c2 d0       	rcall	.+388    	; 0x15f4 <fputc>
    1470:	82 fe       	sbrs	r8, 2
    1472:	08 c0       	rjmp	.+16     	; 0x1484 <vfprintf+0x272>
    1474:	88 e7       	ldi	r24, 0x78	; 120
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	81 fe       	sbrs	r8, 1
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <vfprintf+0x26e>
    147c:	88 e5       	ldi	r24, 0x58	; 88
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	b7 01       	movw	r22, r14
    1482:	b8 d0       	rcall	.+368    	; 0x15f4 <fputc>
    1484:	c9 14       	cp	r12, r9
    1486:	08 f4       	brcc	.+2      	; 0x148a <vfprintf+0x278>
    1488:	86 c0       	rjmp	.+268    	; 0x1596 <vfprintf+0x384>
    148a:	ca 94       	dec	r12
    148c:	d1 2c       	mov	r13, r1
    148e:	9f ef       	ldi	r25, 0xFF	; 255
    1490:	c9 1a       	sub	r12, r25
    1492:	d9 0a       	sbc	r13, r25
    1494:	ca 0c       	add	r12, r10
    1496:	db 1c       	adc	r13, r11
    1498:	f6 01       	movw	r30, r12
    149a:	82 91       	ld	r24, -Z
    149c:	6f 01       	movw	r12, r30
    149e:	b7 01       	movw	r22, r14
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a8 d0       	rcall	.+336    	; 0x15f4 <fputc>
    14a4:	ac 14       	cp	r10, r12
    14a6:	bd 04       	cpc	r11, r13
    14a8:	b9 f7       	brne	.-18     	; 0x1498 <vfprintf+0x286>
    14aa:	57 cf       	rjmp	.-338    	; 0x135a <vfprintf+0x148>
    14ac:	60 81       	ld	r22, Z
    14ae:	71 81       	ldd	r23, Z+1	; 0x01
    14b0:	07 2e       	mov	r0, r23
    14b2:	00 0c       	add	r0, r0
    14b4:	88 0b       	sbc	r24, r24
    14b6:	99 0b       	sbc	r25, r25
    14b8:	0e 5f       	subi	r16, 0xFE	; 254
    14ba:	1f 4f       	sbci	r17, 0xFF	; 255
    14bc:	96 cf       	rjmp	.-212    	; 0x13ea <vfprintf+0x1d8>
    14be:	d3 2c       	mov	r13, r3
    14c0:	e8 94       	clt
    14c2:	d4 f8       	bld	r13, 4
    14c4:	2a e0       	ldi	r18, 0x0A	; 10
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	85 37       	cpi	r24, 0x75	; 117
    14ca:	31 f1       	breq	.+76     	; 0x1518 <vfprintf+0x306>
    14cc:	23 2d       	mov	r18, r3
    14ce:	29 7f       	andi	r18, 0xF9	; 249
    14d0:	d2 2e       	mov	r13, r18
    14d2:	8f 36       	cpi	r24, 0x6F	; 111
    14d4:	f9 f0       	breq	.+62     	; 0x1514 <vfprintf+0x302>
    14d6:	40 f4       	brcc	.+16     	; 0x14e8 <vfprintf+0x2d6>
    14d8:	88 35       	cpi	r24, 0x58	; 88
    14da:	a1 f0       	breq	.+40     	; 0x1504 <vfprintf+0x2f2>
    14dc:	f7 01       	movw	r30, r14
    14de:	86 81       	ldd	r24, Z+6	; 0x06
    14e0:	97 81       	ldd	r25, Z+7	; 0x07
    14e2:	2b 96       	adiw	r28, 0x0b	; 11
    14e4:	e2 e1       	ldi	r30, 0x12	; 18
    14e6:	3b c1       	rjmp	.+630    	; 0x175e <__epilogue_restores__>
    14e8:	80 37       	cpi	r24, 0x70	; 112
    14ea:	49 f0       	breq	.+18     	; 0x14fe <vfprintf+0x2ec>
    14ec:	88 37       	cpi	r24, 0x78	; 120
    14ee:	b1 f7       	brne	.-20     	; 0x14dc <vfprintf+0x2ca>
    14f0:	d4 fe       	sbrs	r13, 4
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <vfprintf+0x2e6>
    14f4:	68 94       	set
    14f6:	d2 f8       	bld	r13, 2
    14f8:	20 e1       	ldi	r18, 0x10	; 16
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	0d c0       	rjmp	.+26     	; 0x1518 <vfprintf+0x306>
    14fe:	68 94       	set
    1500:	d4 f8       	bld	r13, 4
    1502:	f6 cf       	rjmp	.-20     	; 0x14f0 <vfprintf+0x2de>
    1504:	34 fe       	sbrs	r3, 4
    1506:	03 c0       	rjmp	.+6      	; 0x150e <vfprintf+0x2fc>
    1508:	82 2f       	mov	r24, r18
    150a:	86 60       	ori	r24, 0x06	; 6
    150c:	d8 2e       	mov	r13, r24
    150e:	20 e1       	ldi	r18, 0x10	; 16
    1510:	32 e0       	ldi	r19, 0x02	; 2
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <vfprintf+0x306>
    1514:	28 e0       	ldi	r18, 0x08	; 8
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	f8 01       	movw	r30, r16
    151a:	d7 fe       	sbrs	r13, 7
    151c:	0e c0       	rjmp	.+28     	; 0x153a <vfprintf+0x328>
    151e:	60 81       	ld	r22, Z
    1520:	71 81       	ldd	r23, Z+1	; 0x01
    1522:	82 81       	ldd	r24, Z+2	; 0x02
    1524:	93 81       	ldd	r25, Z+3	; 0x03
    1526:	0c 5f       	subi	r16, 0xFC	; 252
    1528:	1f 4f       	sbci	r17, 0xFF	; 255
    152a:	a5 01       	movw	r20, r10
    152c:	93 d0       	rcall	.+294    	; 0x1654 <__ultoa_invert>
    152e:	c8 2e       	mov	r12, r24
    1530:	ca 18       	sub	r12, r10
    1532:	3d 2c       	mov	r3, r13
    1534:	e8 94       	clt
    1536:	37 f8       	bld	r3, 7
    1538:	6c cf       	rjmp	.-296    	; 0x1412 <vfprintf+0x200>
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	0e 5f       	subi	r16, 0xFE	; 254
    1544:	1f 4f       	sbci	r17, 0xFF	; 255
    1546:	f1 cf       	rjmp	.-30     	; 0x152a <vfprintf+0x318>
    1548:	82 fc       	sbrc	r8, 2
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <vfprintf+0x33e>
    154c:	d3 94       	inc	r13
    154e:	7d cf       	rjmp	.-262    	; 0x144a <vfprintf+0x238>
    1550:	d3 94       	inc	r13
    1552:	d3 94       	inc	r13
    1554:	7a cf       	rjmp	.-268    	; 0x144a <vfprintf+0x238>
    1556:	88 2d       	mov	r24, r8
    1558:	86 78       	andi	r24, 0x86	; 134
    155a:	09 f4       	brne	.+2      	; 0x155e <vfprintf+0x34c>
    155c:	76 cf       	rjmp	.-276    	; 0x144a <vfprintf+0x238>
    155e:	f6 cf       	rjmp	.-20     	; 0x154c <vfprintf+0x33a>
    1560:	b7 01       	movw	r22, r14
    1562:	80 e2       	ldi	r24, 0x20	; 32
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	46 d0       	rcall	.+140    	; 0x15f4 <fputc>
    1568:	d3 94       	inc	r13
    156a:	d2 14       	cp	r13, r2
    156c:	c8 f3       	brcs	.-14     	; 0x1560 <vfprintf+0x34e>
    156e:	51 2c       	mov	r5, r1
    1570:	79 cf       	rjmp	.-270    	; 0x1464 <vfprintf+0x252>
    1572:	52 2c       	mov	r5, r2
    1574:	5d 18       	sub	r5, r13
    1576:	d2 14       	cp	r13, r2
    1578:	08 f4       	brcc	.+2      	; 0x157c <vfprintf+0x36a>
    157a:	74 cf       	rjmp	.-280    	; 0x1464 <vfprintf+0x252>
    157c:	f8 cf       	rjmp	.-16     	; 0x156e <vfprintf+0x35c>
    157e:	88 2d       	mov	r24, r8
    1580:	86 78       	andi	r24, 0x86	; 134
    1582:	09 f4       	brne	.+2      	; 0x1586 <vfprintf+0x374>
    1584:	7f cf       	rjmp	.-258    	; 0x1484 <vfprintf+0x272>
    1586:	8b e2       	ldi	r24, 0x2B	; 43
    1588:	81 fe       	sbrs	r8, 1
    158a:	80 e2       	ldi	r24, 0x20	; 32
    158c:	87 fc       	sbrc	r8, 7
    158e:	8d e2       	ldi	r24, 0x2D	; 45
    1590:	b7 01       	movw	r22, r14
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	76 cf       	rjmp	.-276    	; 0x1482 <vfprintf+0x270>
    1596:	b7 01       	movw	r22, r14
    1598:	80 e3       	ldi	r24, 0x30	; 48
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	2b d0       	rcall	.+86     	; 0x15f4 <fputc>
    159e:	9a 94       	dec	r9
    15a0:	71 cf       	rjmp	.-286    	; 0x1484 <vfprintf+0x272>
    15a2:	8f ef       	ldi	r24, 0xFF	; 255
    15a4:	9f ef       	ldi	r25, 0xFF	; 255
    15a6:	9d cf       	rjmp	.-198    	; 0x14e2 <vfprintf+0x2d0>

000015a8 <strnlen_P>:
strnlen_P():
    15a8:	fc 01       	movw	r30, r24
    15aa:	05 90       	lpm	r0, Z+
    15ac:	61 50       	subi	r22, 0x01	; 1
    15ae:	70 40       	sbci	r23, 0x00	; 0
    15b0:	01 10       	cpse	r0, r1
    15b2:	d8 f7       	brcc	.-10     	; 0x15aa <strnlen_P+0x2>
    15b4:	80 95       	com	r24
    15b6:	90 95       	com	r25
    15b8:	8e 0f       	add	r24, r30
    15ba:	9f 1f       	adc	r25, r31
    15bc:	08 95       	ret

000015be <strnlen>:
strnlen():
    15be:	fc 01       	movw	r30, r24
    15c0:	61 50       	subi	r22, 0x01	; 1
    15c2:	70 40       	sbci	r23, 0x00	; 0
    15c4:	01 90       	ld	r0, Z+
    15c6:	01 10       	cpse	r0, r1
    15c8:	d8 f7       	brcc	.-10     	; 0x15c0 <strnlen+0x2>
    15ca:	80 95       	com	r24
    15cc:	90 95       	com	r25
    15ce:	8e 0f       	add	r24, r30
    15d0:	9f 1f       	adc	r25, r31
    15d2:	08 95       	ret

000015d4 <strrev>:
strrev():
    15d4:	dc 01       	movw	r26, r24
    15d6:	fc 01       	movw	r30, r24
    15d8:	67 2f       	mov	r22, r23
    15da:	71 91       	ld	r23, Z+
    15dc:	77 23       	and	r23, r23
    15de:	e1 f7       	brne	.-8      	; 0x15d8 <strrev+0x4>
    15e0:	32 97       	sbiw	r30, 0x02	; 2
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <strrev+0x18>
    15e4:	7c 91       	ld	r23, X
    15e6:	6d 93       	st	X+, r22
    15e8:	70 83       	st	Z, r23
    15ea:	62 91       	ld	r22, -Z
    15ec:	ae 17       	cp	r26, r30
    15ee:	bf 07       	cpc	r27, r31
    15f0:	c8 f3       	brcs	.-14     	; 0x15e4 <strrev+0x10>
    15f2:	08 95       	ret

000015f4 <fputc>:
fputc():
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	18 2f       	mov	r17, r24
    15fe:	09 2f       	mov	r16, r25
    1600:	eb 01       	movw	r28, r22
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	81 fd       	sbrc	r24, 1
    1606:	09 c0       	rjmp	.+18     	; 0x161a <fputc+0x26>
    1608:	1f ef       	ldi	r17, 0xFF	; 255
    160a:	0f ef       	ldi	r16, 0xFF	; 255
    160c:	81 2f       	mov	r24, r17
    160e:	90 2f       	mov	r25, r16
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	08 95       	ret
    161a:	82 ff       	sbrs	r24, 2
    161c:	14 c0       	rjmp	.+40     	; 0x1646 <fputc+0x52>
    161e:	2e 81       	ldd	r18, Y+6	; 0x06
    1620:	3f 81       	ldd	r19, Y+7	; 0x07
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
    1624:	9d 81       	ldd	r25, Y+5	; 0x05
    1626:	28 17       	cp	r18, r24
    1628:	39 07       	cpc	r19, r25
    162a:	3c f4       	brge	.+14     	; 0x163a <fputc+0x46>
    162c:	e8 81       	ld	r30, Y
    162e:	f9 81       	ldd	r31, Y+1	; 0x01
    1630:	cf 01       	movw	r24, r30
    1632:	01 96       	adiw	r24, 0x01	; 1
    1634:	99 83       	std	Y+1, r25	; 0x01
    1636:	88 83       	st	Y, r24
    1638:	10 83       	st	Z, r17
    163a:	8e 81       	ldd	r24, Y+6	; 0x06
    163c:	9f 81       	ldd	r25, Y+7	; 0x07
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	9f 83       	std	Y+7, r25	; 0x07
    1642:	8e 83       	std	Y+6, r24	; 0x06
    1644:	e3 cf       	rjmp	.-58     	; 0x160c <fputc+0x18>
    1646:	e8 85       	ldd	r30, Y+8	; 0x08
    1648:	f9 85       	ldd	r31, Y+9	; 0x09
    164a:	81 2f       	mov	r24, r17
    164c:	09 95       	icall
    164e:	89 2b       	or	r24, r25
    1650:	a1 f3       	breq	.-24     	; 0x163a <fputc+0x46>
    1652:	da cf       	rjmp	.-76     	; 0x1608 <fputc+0x14>

00001654 <__ultoa_invert>:
__ultoa_invert():
    1654:	fa 01       	movw	r30, r20
    1656:	aa 27       	eor	r26, r26
    1658:	28 30       	cpi	r18, 0x08	; 8
    165a:	61 f1       	breq	.+88     	; 0x16b4 <__ultoa_invert+0x60>
    165c:	20 31       	cpi	r18, 0x10	; 16
    165e:	91 f1       	breq	.+100    	; 0x16c4 <__ultoa_invert+0x70>
    1660:	e8 94       	clt
    1662:	6f 93       	push	r22
    1664:	6e 7f       	andi	r22, 0xFE	; 254
    1666:	6e 5f       	subi	r22, 0xFE	; 254
    1668:	7f 4f       	sbci	r23, 0xFF	; 255
    166a:	8f 4f       	sbci	r24, 0xFF	; 255
    166c:	9f 4f       	sbci	r25, 0xFF	; 255
    166e:	af 4f       	sbci	r26, 0xFF	; 255
    1670:	b1 e0       	ldi	r27, 0x01	; 1
    1672:	40 d0       	rcall	.+128    	; 0x16f4 <__ultoa_invert+0xa0>
    1674:	b4 e0       	ldi	r27, 0x04	; 4
    1676:	3e d0       	rcall	.+124    	; 0x16f4 <__ultoa_invert+0xa0>
    1678:	67 0f       	add	r22, r23
    167a:	78 1f       	adc	r23, r24
    167c:	89 1f       	adc	r24, r25
    167e:	9a 1f       	adc	r25, r26
    1680:	a1 1d       	adc	r26, r1
    1682:	68 0f       	add	r22, r24
    1684:	79 1f       	adc	r23, r25
    1686:	8a 1f       	adc	r24, r26
    1688:	91 1d       	adc	r25, r1
    168a:	a1 1d       	adc	r26, r1
    168c:	6a 0f       	add	r22, r26
    168e:	71 1d       	adc	r23, r1
    1690:	81 1d       	adc	r24, r1
    1692:	91 1d       	adc	r25, r1
    1694:	a1 1d       	adc	r26, r1
    1696:	22 d0       	rcall	.+68     	; 0x16dc <__ultoa_invert+0x88>
    1698:	09 f4       	brne	.+2      	; 0x169c <__ultoa_invert+0x48>
    169a:	68 94       	set
    169c:	3f 91       	pop	r19
    169e:	06 2e       	mov	r0, r22
    16a0:	00 0c       	add	r0, r0
    16a2:	30 19       	sub	r19, r0
    16a4:	00 0c       	add	r0, r0
    16a6:	00 0c       	add	r0, r0
    16a8:	30 19       	sub	r19, r0
    16aa:	30 5d       	subi	r19, 0xD0	; 208
    16ac:	31 93       	st	Z+, r19
    16ae:	ce f6       	brtc	.-78     	; 0x1662 <__ultoa_invert+0xe>
    16b0:	cf 01       	movw	r24, r30
    16b2:	08 95       	ret
    16b4:	46 2f       	mov	r20, r22
    16b6:	47 70       	andi	r20, 0x07	; 7
    16b8:	40 5d       	subi	r20, 0xD0	; 208
    16ba:	41 93       	st	Z+, r20
    16bc:	b3 e0       	ldi	r27, 0x03	; 3
    16be:	0f d0       	rcall	.+30     	; 0x16de <__ultoa_invert+0x8a>
    16c0:	c9 f7       	brne	.-14     	; 0x16b4 <__ultoa_invert+0x60>
    16c2:	f6 cf       	rjmp	.-20     	; 0x16b0 <__ultoa_invert+0x5c>
    16c4:	46 2f       	mov	r20, r22
    16c6:	4f 70       	andi	r20, 0x0F	; 15
    16c8:	40 5d       	subi	r20, 0xD0	; 208
    16ca:	4a 33       	cpi	r20, 0x3A	; 58
    16cc:	18 f0       	brcs	.+6      	; 0x16d4 <__ultoa_invert+0x80>
    16ce:	49 5d       	subi	r20, 0xD9	; 217
    16d0:	31 fd       	sbrc	r19, 1
    16d2:	40 52       	subi	r20, 0x20	; 32
    16d4:	41 93       	st	Z+, r20
    16d6:	02 d0       	rcall	.+4      	; 0x16dc <__ultoa_invert+0x88>
    16d8:	a9 f7       	brne	.-22     	; 0x16c4 <__ultoa_invert+0x70>
    16da:	ea cf       	rjmp	.-44     	; 0x16b0 <__ultoa_invert+0x5c>
    16dc:	b4 e0       	ldi	r27, 0x04	; 4
    16de:	a6 95       	lsr	r26
    16e0:	97 95       	ror	r25
    16e2:	87 95       	ror	r24
    16e4:	77 95       	ror	r23
    16e6:	67 95       	ror	r22
    16e8:	ba 95       	dec	r27
    16ea:	c9 f7       	brne	.-14     	; 0x16de <__ultoa_invert+0x8a>
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	61 05       	cpc	r22, r1
    16f0:	71 05       	cpc	r23, r1
    16f2:	08 95       	ret
    16f4:	9b 01       	movw	r18, r22
    16f6:	ac 01       	movw	r20, r24
    16f8:	0a 2e       	mov	r0, r26
    16fa:	06 94       	lsr	r0
    16fc:	57 95       	ror	r21
    16fe:	47 95       	ror	r20
    1700:	37 95       	ror	r19
    1702:	27 95       	ror	r18
    1704:	ba 95       	dec	r27
    1706:	c9 f7       	brne	.-14     	; 0x16fa <__ultoa_invert+0xa6>
    1708:	62 0f       	add	r22, r18
    170a:	73 1f       	adc	r23, r19
    170c:	84 1f       	adc	r24, r20
    170e:	95 1f       	adc	r25, r21
    1710:	a0 1d       	adc	r26, r0
    1712:	08 95       	ret

00001714 <__mulqi3>:
__mulqi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:224
    1714:	00 24       	eor	r0, r0

00001716 <__mulqi3_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:226
    1716:	80 fd       	sbrc	r24, 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:227
    1718:	06 0e       	add	r0, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:228
    171a:	66 0f       	add	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:229
    171c:	11 f0       	breq	.+4      	; 0x1722 <__mulqi3_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:230
    171e:	86 95       	lsr	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:231
    1720:	d1 f7       	brne	.-12     	; 0x1716 <__mulqi3_loop>

00001722 <__mulqi3_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:233
    1722:	80 2d       	mov	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:234
    1724:	08 95       	ret

00001726 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    1726:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    1728:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    172a:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    172c:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    172e:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    1730:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    1732:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    1734:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    1736:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    1738:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    173a:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    173c:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    173e:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    1740:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    1742:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    1744:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    1746:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1748:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    174a:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    174c:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    174e:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    1750:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    1752:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    1754:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    1756:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    1758:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    175a:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    175c:	09 94       	ijmp

0000175e <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    175e:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    1760:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    1762:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    1764:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    1766:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    1768:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    176a:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    176c:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    176e:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    1770:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    1772:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    1774:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    1776:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    1778:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    177a:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    177c:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    177e:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    1780:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    1782:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    1784:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    1786:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    1788:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    178a:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    178c:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    178e:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    1790:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    1792:	08 95       	ret

00001794 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    1794:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    1796:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <__udivmodqi4_ep>

0000179a <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    179a:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    179c:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    179e:	08 f0       	brcs	.+2      	; 0x17a2 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    17a0:	96 1b       	sub	r25, r22

000017a2 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    17a2:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    17a4:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    17a6:	c9 f7       	brne	.-14     	; 0x179a <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    17a8:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    17aa:	08 95       	ret

000017ac <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    17ac:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    17ae:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    17b0:	16 f4       	brtc	.+4      	; 0x17b6 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    17b2:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    17b4:	06 d0       	rcall	.+12     	; 0x17c2 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    17b6:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    17b8:	08 d0       	rcall	.+16     	; 0x17ca <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    17ba:	54 d0       	rcall	.+168    	; 0x1864 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    17bc:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    17be:	05 d0       	rcall	.+10     	; 0x17ca <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    17c0:	3e f4       	brtc	.+14     	; 0x17d0 <__divmodhi4_exit>

000017c2 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    17c2:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    17c4:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    17c6:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    17c8:	08 95       	ret

000017ca <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    17ca:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    17cc:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255

000017d0 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    17d0:	08 95       	ret

000017d2 <__bswapsi2>:
__bswapsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3092
    17d2:	69 27       	eor	r22, r25
    17d4:	96 27       	eor	r25, r22
    17d6:	69 27       	eor	r22, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3093
    17d8:	78 27       	eor	r23, r24
    17da:	87 27       	eor	r24, r23
    17dc:	78 27       	eor	r23, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3094
    17de:	08 95       	ret

000017e0 <__ashldi3>:
__ashldi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3169
    17e0:	00 2e       	mov	r0, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3170
    17e2:	08 30       	cpi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3171
    17e4:	90 f0       	brcs	.+36     	; 0x180a <__ashldi3+0x2a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3172
    17e6:	98 2f       	mov	r25, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3173
    17e8:	87 2f       	mov	r24, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3174
    17ea:	76 2f       	mov	r23, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3175
    17ec:	65 2f       	mov	r22, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3176
    17ee:	54 2f       	mov	r21, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3177
    17f0:	43 2f       	mov	r20, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3178
    17f2:	32 2f       	mov	r19, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3179
    17f4:	22 27       	eor	r18, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3180
    17f6:	08 50       	subi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3181
    17f8:	f4 cf       	rjmp	.-24     	; 0x17e2 <__ashldi3+0x2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3182
    17fa:	22 0f       	add	r18, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3183
    17fc:	33 1f       	adc	r19, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3184
    17fe:	44 1f       	adc	r20, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3185
    1800:	55 1f       	adc	r21, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3186
    1802:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3187
    1804:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3188
    1806:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3189
    1808:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3190
    180a:	0a 95       	dec	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3191
    180c:	b2 f7       	brpl	.-20     	; 0x17fa <__ashldi3+0x1a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3192
    180e:	00 2d       	mov	r16, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3193
    1810:	08 95       	ret

00001812 <__ashrdi3>:
__ashrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3122
    1812:	97 fd       	sbrc	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3123
    1814:	10 94       	com	r1

00001816 <__lshrdi3>:
__lshrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3131
    1816:	00 2e       	mov	r0, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3132
    1818:	08 30       	cpi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3133
    181a:	98 f0       	brcs	.+38     	; 0x1842 <__lshrdi3+0x2c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3134
    181c:	08 50       	subi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3135
    181e:	23 2f       	mov	r18, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3136
    1820:	34 2f       	mov	r19, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3137
    1822:	45 2f       	mov	r20, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3138
    1824:	56 2f       	mov	r21, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3139
    1826:	67 2f       	mov	r22, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3140
    1828:	78 2f       	mov	r23, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3141
    182a:	89 2f       	mov	r24, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3142
    182c:	91 2d       	mov	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3143
    182e:	f4 cf       	rjmp	.-24     	; 0x1818 <__lshrdi3+0x2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3144
    1830:	15 94       	asr	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3145
    1832:	97 95       	ror	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3146
    1834:	87 95       	ror	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3147
    1836:	77 95       	ror	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3148
    1838:	67 95       	ror	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3149
    183a:	57 95       	ror	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3150
    183c:	47 95       	ror	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3151
    183e:	37 95       	ror	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3152
    1840:	27 95       	ror	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3153
    1842:	0a 95       	dec	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3154
    1844:	aa f7       	brpl	.-22     	; 0x1830 <__lshrdi3+0x1a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3155
    1846:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3156
    1848:	00 2d       	mov	r16, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3157
    184a:	08 95       	ret

0000184c <__adddi3_s8>:
__adddi3_s8():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2064
    184c:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2065
    184e:	a7 fd       	sbrc	r26, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2066
    1850:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2067
    1852:	2a 0f       	add	r18, r26
    1854:	30 1d       	adc	r19, r0
    1856:	40 1d       	adc	r20, r0
    1858:	50 1d       	adc	r21, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2068
    185a:	60 1d       	adc	r22, r0
    185c:	70 1d       	adc	r23, r0
    185e:	80 1d       	adc	r24, r0
    1860:	90 1d       	adc	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2069
    1862:	08 95       	ret

00001864 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    1864:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    1866:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    1868:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    186a:	07 c0       	rjmp	.+14     	; 0x187a <__udivmodhi4_ep>

0000186c <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    186c:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    186e:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    1870:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    1872:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    1874:	10 f0       	brcs	.+4      	; 0x187a <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    1876:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    1878:	b7 0b       	sbc	r27, r23

0000187a <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    187a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    187c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    187e:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    1880:	a9 f7       	brne	.-22     	; 0x186c <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    1882:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    1884:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    1886:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    1888:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    188a:	08 95       	ret

0000188c <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    188c:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    188e:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1890:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1892:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1894:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1896:	09 94       	ijmp

00001898 <malloc>:
malloc():
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	82 30       	cpi	r24, 0x02	; 2
    18a2:	91 05       	cpc	r25, r1
    18a4:	10 f4       	brcc	.+4      	; 0x18aa <malloc+0x12>
    18a6:	82 e0       	ldi	r24, 0x02	; 2
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <__flp>
    18ae:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <__flp+0x1>
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	a0 e0       	ldi	r26, 0x00	; 0
    18ba:	30 97       	sbiw	r30, 0x00	; 0
    18bc:	99 f4       	brne	.+38     	; 0x18e4 <malloc+0x4c>
    18be:	21 15       	cp	r18, r1
    18c0:	31 05       	cpc	r19, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <malloc+0x2e>
    18c4:	4a c0       	rjmp	.+148    	; 0x195a <malloc+0xc2>
    18c6:	28 1b       	sub	r18, r24
    18c8:	39 0b       	sbc	r19, r25
    18ca:	24 30       	cpi	r18, 0x04	; 4
    18cc:	31 05       	cpc	r19, r1
    18ce:	d8 f5       	brcc	.+118    	; 0x1946 <malloc+0xae>
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	9b 81       	ldd	r25, Y+3	; 0x03
    18d4:	61 15       	cp	r22, r1
    18d6:	71 05       	cpc	r23, r1
    18d8:	89 f1       	breq	.+98     	; 0x193c <malloc+0xa4>
    18da:	fb 01       	movw	r30, r22
    18dc:	93 83       	std	Z+3, r25	; 0x03
    18de:	82 83       	std	Z+2, r24	; 0x02
    18e0:	fe 01       	movw	r30, r28
    18e2:	11 c0       	rjmp	.+34     	; 0x1906 <malloc+0x6e>
    18e4:	40 81       	ld	r20, Z
    18e6:	51 81       	ldd	r21, Z+1	; 0x01
    18e8:	02 81       	ldd	r16, Z+2	; 0x02
    18ea:	13 81       	ldd	r17, Z+3	; 0x03
    18ec:	48 17       	cp	r20, r24
    18ee:	59 07       	cpc	r21, r25
    18f0:	e0 f0       	brcs	.+56     	; 0x192a <malloc+0x92>
    18f2:	48 17       	cp	r20, r24
    18f4:	59 07       	cpc	r21, r25
    18f6:	99 f4       	brne	.+38     	; 0x191e <malloc+0x86>
    18f8:	10 97       	sbiw	r26, 0x00	; 0
    18fa:	61 f0       	breq	.+24     	; 0x1914 <malloc+0x7c>
    18fc:	12 96       	adiw	r26, 0x02	; 2
    18fe:	0c 93       	st	X, r16
    1900:	12 97       	sbiw	r26, 0x02	; 2
    1902:	13 96       	adiw	r26, 0x03	; 3
    1904:	1c 93       	st	X, r17
    1906:	32 96       	adiw	r30, 0x02	; 2
    1908:	cf 01       	movw	r24, r30
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	08 95       	ret
    1914:	00 93 13 02 	sts	0x0213, r16	; 0x800213 <__flp>
    1918:	10 93 14 02 	sts	0x0214, r17	; 0x800214 <__flp+0x1>
    191c:	f4 cf       	rjmp	.-24     	; 0x1906 <malloc+0x6e>
    191e:	21 15       	cp	r18, r1
    1920:	31 05       	cpc	r19, r1
    1922:	51 f0       	breq	.+20     	; 0x1938 <malloc+0xa0>
    1924:	42 17       	cp	r20, r18
    1926:	53 07       	cpc	r21, r19
    1928:	38 f0       	brcs	.+14     	; 0x1938 <malloc+0xa0>
    192a:	a9 01       	movw	r20, r18
    192c:	db 01       	movw	r26, r22
    192e:	9a 01       	movw	r18, r20
    1930:	bd 01       	movw	r22, r26
    1932:	df 01       	movw	r26, r30
    1934:	f8 01       	movw	r30, r16
    1936:	c1 cf       	rjmp	.-126    	; 0x18ba <malloc+0x22>
    1938:	ef 01       	movw	r28, r30
    193a:	f9 cf       	rjmp	.-14     	; 0x192e <malloc+0x96>
    193c:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <__flp+0x1>
    1940:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <__flp>
    1944:	cd cf       	rjmp	.-102    	; 0x18e0 <malloc+0x48>
    1946:	fe 01       	movw	r30, r28
    1948:	e2 0f       	add	r30, r18
    194a:	f3 1f       	adc	r31, r19
    194c:	81 93       	st	Z+, r24
    194e:	91 93       	st	Z+, r25
    1950:	22 50       	subi	r18, 0x02	; 2
    1952:	31 09       	sbc	r19, r1
    1954:	39 83       	std	Y+1, r19	; 0x01
    1956:	28 83       	st	Y, r18
    1958:	d7 cf       	rjmp	.-82     	; 0x1908 <malloc+0x70>
    195a:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <__brkval>
    195e:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <__brkval+0x1>
    1962:	23 2b       	or	r18, r19
    1964:	41 f4       	brne	.+16     	; 0x1976 <malloc+0xde>
    1966:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <__malloc_heap_start>
    196a:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <__malloc_heap_start+0x1>
    196e:	30 93 12 02 	sts	0x0212, r19	; 0x800212 <__brkval+0x1>
    1972:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <__brkval>
    1976:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <__malloc_heap_end>
    197a:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <__malloc_heap_end+0x1>
    197e:	21 15       	cp	r18, r1
    1980:	31 05       	cpc	r19, r1
    1982:	41 f4       	brne	.+16     	; 0x1994 <malloc+0xfc>
    1984:	2d b7       	in	r18, 0x3d	; 61
    1986:	3e b7       	in	r19, 0x3e	; 62
    1988:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <__malloc_margin>
    198c:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <__malloc_margin+0x1>
    1990:	24 1b       	sub	r18, r20
    1992:	35 0b       	sbc	r19, r21
    1994:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <__brkval>
    1998:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <__brkval+0x1>
    199c:	e2 17       	cp	r30, r18
    199e:	f3 07       	cpc	r31, r19
    19a0:	a0 f4       	brcc	.+40     	; 0x19ca <malloc+0x132>
    19a2:	2e 1b       	sub	r18, r30
    19a4:	3f 0b       	sbc	r19, r31
    19a6:	28 17       	cp	r18, r24
    19a8:	39 07       	cpc	r19, r25
    19aa:	78 f0       	brcs	.+30     	; 0x19ca <malloc+0x132>
    19ac:	ac 01       	movw	r20, r24
    19ae:	4e 5f       	subi	r20, 0xFE	; 254
    19b0:	5f 4f       	sbci	r21, 0xFF	; 255
    19b2:	24 17       	cp	r18, r20
    19b4:	35 07       	cpc	r19, r21
    19b6:	48 f0       	brcs	.+18     	; 0x19ca <malloc+0x132>
    19b8:	4e 0f       	add	r20, r30
    19ba:	5f 1f       	adc	r21, r31
    19bc:	50 93 12 02 	sts	0x0212, r21	; 0x800212 <__brkval+0x1>
    19c0:	40 93 11 02 	sts	0x0211, r20	; 0x800211 <__brkval>
    19c4:	81 93       	st	Z+, r24
    19c6:	91 93       	st	Z+, r25
    19c8:	9f cf       	rjmp	.-194    	; 0x1908 <malloc+0x70>
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	e0 e0       	ldi	r30, 0x00	; 0
    19ce:	9c cf       	rjmp	.-200    	; 0x1908 <malloc+0x70>

000019d0 <free>:
free():
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	e9 f0       	breq	.+58     	; 0x1a12 <free+0x42>
    19d8:	fc 01       	movw	r30, r24
    19da:	32 97       	sbiw	r30, 0x02	; 2
    19dc:	13 82       	std	Z+3, r1	; 0x03
    19de:	12 82       	std	Z+2, r1	; 0x02
    19e0:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <__flp>
    19e4:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <__flp+0x1>
    19e8:	ed 01       	movw	r28, r26
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	10 97       	sbiw	r26, 0x00	; 0
    19f0:	a1 f4       	brne	.+40     	; 0x1a1a <free+0x4a>
    19f2:	20 81       	ld	r18, Z
    19f4:	31 81       	ldd	r19, Z+1	; 0x01
    19f6:	82 0f       	add	r24, r18
    19f8:	93 1f       	adc	r25, r19
    19fa:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <__brkval>
    19fe:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <__brkval+0x1>
    1a02:	28 17       	cp	r18, r24
    1a04:	39 07       	cpc	r19, r25
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <free+0x3a>
    1a08:	61 c0       	rjmp	.+194    	; 0x1acc <free+0xfc>
    1a0a:	f0 93 12 02 	sts	0x0212, r31	; 0x800212 <__brkval+0x1>
    1a0e:	e0 93 11 02 	sts	0x0211, r30	; 0x800211 <__brkval>
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	08 95       	ret
    1a18:	ea 01       	movw	r28, r20
    1a1a:	ce 17       	cp	r28, r30
    1a1c:	df 07       	cpc	r29, r31
    1a1e:	e8 f5       	brcc	.+122    	; 0x1a9a <free+0xca>
    1a20:	4a 81       	ldd	r20, Y+2	; 0x02
    1a22:	5b 81       	ldd	r21, Y+3	; 0x03
    1a24:	9e 01       	movw	r18, r28
    1a26:	41 15       	cp	r20, r1
    1a28:	51 05       	cpc	r21, r1
    1a2a:	b1 f7       	brne	.-20     	; 0x1a18 <free+0x48>
    1a2c:	e9 01       	movw	r28, r18
    1a2e:	fb 83       	std	Y+3, r31	; 0x03
    1a30:	ea 83       	std	Y+2, r30	; 0x02
    1a32:	49 91       	ld	r20, Y+
    1a34:	59 91       	ld	r21, Y+
    1a36:	c4 0f       	add	r28, r20
    1a38:	d5 1f       	adc	r29, r21
    1a3a:	ec 17       	cp	r30, r28
    1a3c:	fd 07       	cpc	r31, r29
    1a3e:	61 f4       	brne	.+24     	; 0x1a58 <free+0x88>
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	02 96       	adiw	r24, 0x02	; 2
    1a46:	84 0f       	add	r24, r20
    1a48:	95 1f       	adc	r25, r21
    1a4a:	e9 01       	movw	r28, r18
    1a4c:	99 83       	std	Y+1, r25	; 0x01
    1a4e:	88 83       	st	Y, r24
    1a50:	82 81       	ldd	r24, Z+2	; 0x02
    1a52:	93 81       	ldd	r25, Z+3	; 0x03
    1a54:	9b 83       	std	Y+3, r25	; 0x03
    1a56:	8a 83       	std	Y+2, r24	; 0x02
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	e0 e0       	ldi	r30, 0x00	; 0
    1a5c:	12 96       	adiw	r26, 0x02	; 2
    1a5e:	8d 91       	ld	r24, X+
    1a60:	9c 91       	ld	r25, X
    1a62:	13 97       	sbiw	r26, 0x03	; 3
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	b9 f5       	brne	.+110    	; 0x1ad6 <free+0x106>
    1a68:	2d 91       	ld	r18, X+
    1a6a:	3c 91       	ld	r19, X
    1a6c:	11 97       	sbiw	r26, 0x01	; 1
    1a6e:	cd 01       	movw	r24, r26
    1a70:	02 96       	adiw	r24, 0x02	; 2
    1a72:	82 0f       	add	r24, r18
    1a74:	93 1f       	adc	r25, r19
    1a76:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <__brkval>
    1a7a:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <__brkval+0x1>
    1a7e:	28 17       	cp	r18, r24
    1a80:	39 07       	cpc	r19, r25
    1a82:	39 f6       	brne	.-114    	; 0x1a12 <free+0x42>
    1a84:	30 97       	sbiw	r30, 0x00	; 0
    1a86:	51 f5       	brne	.+84     	; 0x1adc <free+0x10c>
    1a88:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__flp+0x1>
    1a8c:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <__flp>
    1a90:	b0 93 12 02 	sts	0x0212, r27	; 0x800212 <__brkval+0x1>
    1a94:	a0 93 11 02 	sts	0x0211, r26	; 0x800211 <__brkval>
    1a98:	bc cf       	rjmp	.-136    	; 0x1a12 <free+0x42>
    1a9a:	d3 83       	std	Z+3, r29	; 0x03
    1a9c:	c2 83       	std	Z+2, r28	; 0x02
    1a9e:	40 81       	ld	r20, Z
    1aa0:	51 81       	ldd	r21, Z+1	; 0x01
    1aa2:	84 0f       	add	r24, r20
    1aa4:	95 1f       	adc	r25, r21
    1aa6:	c8 17       	cp	r28, r24
    1aa8:	d9 07       	cpc	r29, r25
    1aaa:	61 f4       	brne	.+24     	; 0x1ac4 <free+0xf4>
    1aac:	4e 5f       	subi	r20, 0xFE	; 254
    1aae:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab0:	88 81       	ld	r24, Y
    1ab2:	99 81       	ldd	r25, Y+1	; 0x01
    1ab4:	48 0f       	add	r20, r24
    1ab6:	59 1f       	adc	r21, r25
    1ab8:	51 83       	std	Z+1, r21	; 0x01
    1aba:	40 83       	st	Z, r20
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac0:	93 83       	std	Z+3, r25	; 0x03
    1ac2:	82 83       	std	Z+2, r24	; 0x02
    1ac4:	21 15       	cp	r18, r1
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <free+0xfc>
    1aca:	b0 cf       	rjmp	.-160    	; 0x1a2c <free+0x5c>
    1acc:	f0 93 14 02 	sts	0x0214, r31	; 0x800214 <__flp+0x1>
    1ad0:	e0 93 13 02 	sts	0x0213, r30	; 0x800213 <__flp>
    1ad4:	9e cf       	rjmp	.-196    	; 0x1a12 <free+0x42>
    1ad6:	fd 01       	movw	r30, r26
    1ad8:	dc 01       	movw	r26, r24
    1ada:	c0 cf       	rjmp	.-128    	; 0x1a5c <free+0x8c>
    1adc:	13 82       	std	Z+3, r1	; 0x03
    1ade:	12 82       	std	Z+2, r1	; 0x02
    1ae0:	d7 cf       	rjmp	.-82     	; 0x1a90 <free+0xc0>

00001ae2 <realloc>:
realloc():
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	a0 e0       	ldi	r26, 0x00	; 0
    1ae6:	e6 e7       	ldi	r30, 0x76	; 118
    1ae8:	fd e0       	ldi	r31, 0x0D	; 13
    1aea:	1f ce       	rjmp	.-962    	; 0x172a <__prologue_saves__+0x4>
    1aec:	8c 01       	movw	r16, r24
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	41 f4       	brne	.+16     	; 0x1b02 <realloc+0x20>
    1af2:	cb 01       	movw	r24, r22
    1af4:	d1 de       	rcall	.-606    	; 0x1898 <malloc>
    1af6:	8c 01       	movw	r16, r24
    1af8:	c8 01       	movw	r24, r16
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	e0 e1       	ldi	r30, 0x10	; 16
    1b00:	30 ce       	rjmp	.-928    	; 0x1762 <__epilogue_restores__+0x4>
    1b02:	fc 01       	movw	r30, r24
    1b04:	e6 0f       	add	r30, r22
    1b06:	f7 1f       	adc	r31, r23
    1b08:	9c 01       	movw	r18, r24
    1b0a:	22 50       	subi	r18, 0x02	; 2
    1b0c:	31 09       	sbc	r19, r1
    1b0e:	e2 17       	cp	r30, r18
    1b10:	f3 07       	cpc	r31, r19
    1b12:	08 f4       	brcc	.+2      	; 0x1b16 <realloc+0x34>
    1b14:	99 c0       	rjmp	.+306    	; 0x1c48 <realloc+0x166>
    1b16:	d9 01       	movw	r26, r18
    1b18:	cd 91       	ld	r28, X+
    1b1a:	dc 91       	ld	r29, X
    1b1c:	11 97       	sbiw	r26, 0x01	; 1
    1b1e:	c6 17       	cp	r28, r22
    1b20:	d7 07       	cpc	r29, r23
    1b22:	90 f0       	brcs	.+36     	; 0x1b48 <realloc+0x66>
    1b24:	c5 30       	cpi	r28, 0x05	; 5
    1b26:	d1 05       	cpc	r29, r1
    1b28:	38 f3       	brcs	.-50     	; 0x1af8 <realloc+0x16>
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	04 97       	sbiw	r24, 0x04	; 4
    1b2e:	86 17       	cp	r24, r22
    1b30:	97 07       	cpc	r25, r23
    1b32:	10 f3       	brcs	.-60     	; 0x1af8 <realloc+0x16>
    1b34:	c6 1b       	sub	r28, r22
    1b36:	d7 0b       	sbc	r29, r23
    1b38:	22 97       	sbiw	r28, 0x02	; 2
    1b3a:	c1 93       	st	Z+, r28
    1b3c:	d1 93       	st	Z+, r29
    1b3e:	6d 93       	st	X+, r22
    1b40:	7c 93       	st	X, r23
    1b42:	cf 01       	movw	r24, r30
    1b44:	45 df       	rcall	.-374    	; 0x19d0 <free>
    1b46:	d8 cf       	rjmp	.-80     	; 0x1af8 <realloc+0x16>
    1b48:	5b 01       	movw	r10, r22
    1b4a:	ac 1a       	sub	r10, r28
    1b4c:	bd 0a       	sbc	r11, r29
    1b4e:	4c 01       	movw	r8, r24
    1b50:	8c 0e       	add	r8, r28
    1b52:	9d 1e       	adc	r9, r29
    1b54:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <__flp>
    1b58:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <__flp+0x1>
    1b5c:	51 2c       	mov	r5, r1
    1b5e:	41 2c       	mov	r4, r1
    1b60:	f1 2c       	mov	r15, r1
    1b62:	e1 2c       	mov	r14, r1
    1b64:	10 97       	sbiw	r26, 0x00	; 0
    1b66:	31 f5       	brne	.+76     	; 0x1bb4 <realloc+0xd2>
    1b68:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <__brkval>
    1b6c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <__brkval+0x1>
    1b70:	88 15       	cp	r24, r8
    1b72:	99 05       	cpc	r25, r9
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <realloc+0x96>
    1b76:	5c c0       	rjmp	.+184    	; 0x1c30 <realloc+0x14e>
    1b78:	46 16       	cp	r4, r22
    1b7a:	57 06       	cpc	r5, r23
    1b7c:	08 f0       	brcs	.+2      	; 0x1b80 <realloc+0x9e>
    1b7e:	58 c0       	rjmp	.+176    	; 0x1c30 <realloc+0x14e>
    1b80:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__malloc_heap_end>
    1b84:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <__malloc_heap_end+0x1>
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	41 f4       	brne	.+16     	; 0x1b9c <realloc+0xba>
    1b8c:	8d b7       	in	r24, 0x3d	; 61
    1b8e:	9e b7       	in	r25, 0x3e	; 62
    1b90:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <__malloc_margin>
    1b94:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <__malloc_margin+0x1>
    1b98:	84 1b       	sub	r24, r20
    1b9a:	95 0b       	sbc	r25, r21
    1b9c:	e8 17       	cp	r30, r24
    1b9e:	f9 07       	cpc	r31, r25
    1ba0:	08 f0       	brcs	.+2      	; 0x1ba4 <realloc+0xc2>
    1ba2:	52 c0       	rjmp	.+164    	; 0x1c48 <realloc+0x166>
    1ba4:	f0 93 12 02 	sts	0x0212, r31	; 0x800212 <__brkval+0x1>
    1ba8:	e0 93 11 02 	sts	0x0211, r30	; 0x800211 <__brkval>
    1bac:	f9 01       	movw	r30, r18
    1bae:	71 83       	std	Z+1, r23	; 0x01
    1bb0:	60 83       	st	Z, r22
    1bb2:	a2 cf       	rjmp	.-188    	; 0x1af8 <realloc+0x16>
    1bb4:	8d 91       	ld	r24, X+
    1bb6:	9c 91       	ld	r25, X
    1bb8:	11 97       	sbiw	r26, 0x01	; 1
    1bba:	12 96       	adiw	r26, 0x02	; 2
    1bbc:	6c 90       	ld	r6, X
    1bbe:	12 97       	sbiw	r26, 0x02	; 2
    1bc0:	13 96       	adiw	r26, 0x03	; 3
    1bc2:	7c 90       	ld	r7, X
    1bc4:	13 97       	sbiw	r26, 0x03	; 3
    1bc6:	a8 15       	cp	r26, r8
    1bc8:	b9 05       	cpc	r27, r9
    1bca:	59 f5       	brne	.+86     	; 0x1c22 <realloc+0x140>
    1bcc:	6c 01       	movw	r12, r24
    1bce:	42 e0       	ldi	r20, 0x02	; 2
    1bd0:	c4 0e       	add	r12, r20
    1bd2:	d1 1c       	adc	r13, r1
    1bd4:	ca 14       	cp	r12, r10
    1bd6:	db 04       	cpc	r13, r11
    1bd8:	20 f1       	brcs	.+72     	; 0x1c22 <realloc+0x140>
    1bda:	ac 01       	movw	r20, r24
    1bdc:	4a 19       	sub	r20, r10
    1bde:	5b 09       	sbc	r21, r11
    1be0:	da 01       	movw	r26, r20
    1be2:	12 96       	adiw	r26, 0x02	; 2
    1be4:	15 97       	sbiw	r26, 0x05	; 5
    1be6:	80 f0       	brcs	.+32     	; 0x1c08 <realloc+0x126>
    1be8:	62 82       	std	Z+2, r6	; 0x02
    1bea:	73 82       	std	Z+3, r7	; 0x03
    1bec:	51 83       	std	Z+1, r21	; 0x01
    1bee:	40 83       	st	Z, r20
    1bf0:	d9 01       	movw	r26, r18
    1bf2:	6d 93       	st	X+, r22
    1bf4:	7c 93       	st	X, r23
    1bf6:	e1 14       	cp	r14, r1
    1bf8:	f1 04       	cpc	r15, r1
    1bfa:	71 f0       	breq	.+28     	; 0x1c18 <realloc+0x136>
    1bfc:	d7 01       	movw	r26, r14
    1bfe:	13 96       	adiw	r26, 0x03	; 3
    1c00:	fc 93       	st	X, r31
    1c02:	ee 93       	st	-X, r30
    1c04:	12 97       	sbiw	r26, 0x02	; 2
    1c06:	78 cf       	rjmp	.-272    	; 0x1af8 <realloc+0x16>
    1c08:	22 96       	adiw	r28, 0x02	; 2
    1c0a:	8c 0f       	add	r24, r28
    1c0c:	9d 1f       	adc	r25, r29
    1c0e:	f9 01       	movw	r30, r18
    1c10:	91 83       	std	Z+1, r25	; 0x01
    1c12:	80 83       	st	Z, r24
    1c14:	f3 01       	movw	r30, r6
    1c16:	ef cf       	rjmp	.-34     	; 0x1bf6 <realloc+0x114>
    1c18:	f0 93 14 02 	sts	0x0214, r31	; 0x800214 <__flp+0x1>
    1c1c:	e0 93 13 02 	sts	0x0213, r30	; 0x800213 <__flp>
    1c20:	6b cf       	rjmp	.-298    	; 0x1af8 <realloc+0x16>
    1c22:	48 16       	cp	r4, r24
    1c24:	59 06       	cpc	r5, r25
    1c26:	08 f4       	brcc	.+2      	; 0x1c2a <realloc+0x148>
    1c28:	2c 01       	movw	r4, r24
    1c2a:	7d 01       	movw	r14, r26
    1c2c:	d3 01       	movw	r26, r6
    1c2e:	9a cf       	rjmp	.-204    	; 0x1b64 <realloc+0x82>
    1c30:	cb 01       	movw	r24, r22
    1c32:	32 de       	rcall	.-924    	; 0x1898 <malloc>
    1c34:	7c 01       	movw	r14, r24
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	39 f0       	breq	.+14     	; 0x1c48 <realloc+0x166>
    1c3a:	ae 01       	movw	r20, r28
    1c3c:	b8 01       	movw	r22, r16
    1c3e:	1c d0       	rcall	.+56     	; 0x1c78 <memcpy>
    1c40:	c8 01       	movw	r24, r16
    1c42:	c6 de       	rcall	.-628    	; 0x19d0 <free>
    1c44:	87 01       	movw	r16, r14
    1c46:	58 cf       	rjmp	.-336    	; 0x1af8 <realloc+0x16>
    1c48:	10 e0       	ldi	r17, 0x00	; 0
    1c4a:	00 e0       	ldi	r16, 0x00	; 0
    1c4c:	55 cf       	rjmp	.-342    	; 0x1af8 <realloc+0x16>

00001c4e <toupper>:
toupper():
    1c4e:	91 11       	cpse	r25, r1
    1c50:	08 95       	ret
    1c52:	81 56       	subi	r24, 0x61	; 97
    1c54:	8a 51       	subi	r24, 0x1A	; 26
    1c56:	08 f4       	brcc	.+2      	; 0x1c5a <toupper+0xc>
    1c58:	80 52       	subi	r24, 0x20	; 32
    1c5a:	85 58       	subi	r24, 0x85	; 133
    1c5c:	08 95       	ret

00001c5e <memcmp>:
memcmp():
    1c5e:	fb 01       	movw	r30, r22
    1c60:	dc 01       	movw	r26, r24
    1c62:	04 c0       	rjmp	.+8      	; 0x1c6c <memcmp+0xe>
    1c64:	8d 91       	ld	r24, X+
    1c66:	01 90       	ld	r0, Z+
    1c68:	80 19       	sub	r24, r0
    1c6a:	21 f4       	brne	.+8      	; 0x1c74 <memcmp+0x16>
    1c6c:	41 50       	subi	r20, 0x01	; 1
    1c6e:	50 40       	sbci	r21, 0x00	; 0
    1c70:	c8 f7       	brcc	.-14     	; 0x1c64 <memcmp+0x6>
    1c72:	88 1b       	sub	r24, r24
    1c74:	99 0b       	sbc	r25, r25
    1c76:	08 95       	ret

00001c78 <memcpy>:
memcpy():
    1c78:	fb 01       	movw	r30, r22
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <memcpy+0xa>
    1c7e:	01 90       	ld	r0, Z+
    1c80:	0d 92       	st	X+, r0
    1c82:	41 50       	subi	r20, 0x01	; 1
    1c84:	50 40       	sbci	r21, 0x00	; 0
    1c86:	d8 f7       	brcc	.-10     	; 0x1c7e <memcpy+0x6>
    1c88:	08 95       	ret

00001c8a <strcpy>:
strcpy():
    1c8a:	fb 01       	movw	r30, r22
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	01 90       	ld	r0, Z+
    1c90:	0d 92       	st	X+, r0
    1c92:	00 20       	and	r0, r0
    1c94:	e1 f7       	brne	.-8      	; 0x1c8e <strcpy+0x4>
    1c96:	08 95       	ret

00001c98 <sprintf>:
sprintf():
    1c98:	ae e0       	ldi	r26, 0x0E	; 14
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e1 e5       	ldi	r30, 0x51	; 81
    1c9e:	fe e0       	ldi	r31, 0x0E	; 14
    1ca0:	50 cd       	rjmp	.-1376   	; 0x1742 <__prologue_saves__+0x1c>
    1ca2:	0d 89       	ldd	r16, Y+21	; 0x15
    1ca4:	1e 89       	ldd	r17, Y+22	; 0x16
    1ca6:	86 e0       	ldi	r24, 0x06	; 6
    1ca8:	8c 83       	std	Y+4, r24	; 0x04
    1caa:	1a 83       	std	Y+2, r17	; 0x02
    1cac:	09 83       	std	Y+1, r16	; 0x01
    1cae:	8f ef       	ldi	r24, 0xFF	; 255
    1cb0:	9f e7       	ldi	r25, 0x7F	; 127
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	ae 01       	movw	r20, r28
    1cb8:	47 5e       	subi	r20, 0xE7	; 231
    1cba:	5f 4f       	sbci	r21, 0xFF	; 255
    1cbc:	6f 89       	ldd	r22, Y+23	; 0x17
    1cbe:	78 8d       	ldd	r23, Y+24	; 0x18
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	01 96       	adiw	r24, 0x01	; 1
    1cc4:	a6 da       	rcall	.-2740   	; 0x1212 <vfprintf>
    1cc6:	2f 81       	ldd	r18, Y+7	; 0x07
    1cc8:	38 85       	ldd	r19, Y+8	; 0x08
    1cca:	02 0f       	add	r16, r18
    1ccc:	13 1f       	adc	r17, r19
    1cce:	f8 01       	movw	r30, r16
    1cd0:	10 82       	st	Z, r1
    1cd2:	2e 96       	adiw	r28, 0x0e	; 14
    1cd4:	e4 e0       	ldi	r30, 0x04	; 4
    1cd6:	51 cd       	rjmp	.-1374   	; 0x177a <__epilogue_restores__+0x1c>

00001cd8 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    1cd8:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    1cda:	c2 e2       	ldi	r28, 0x22	; 34
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    1cdc:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    1cde:	03 c0       	rjmp	.+6      	; 0x1ce6 <__do_global_dtors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    1ce0:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    1ce2:	d4 dd       	rcall	.-1112   	; 0x188c <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    1ce4:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    1ce6:	c3 32       	cpi	r28, 0x23	; 35
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    1ce8:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    1cea:	d1 f7       	brne	.-12     	; 0x1ce0 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1cec:	f8 94       	cli

00001cee <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1cee:	ff cf       	rjmp	.-2      	; 0x1cee <__stop_program>
